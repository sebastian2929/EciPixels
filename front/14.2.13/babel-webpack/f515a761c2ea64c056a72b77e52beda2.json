{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix - copia/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"scrollContainer\"];\n\nfunction MatrixComponent_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"click\", function MatrixComponent_div_15_div_1_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const j_r6 = restoredCtx.index;\n      const i_r3 = i0.ɵɵnextContext().index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.setActiveCell(i_r3, j_r6));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r5 = ctx.$implicit;\n    const j_r6 = ctx.index;\n    const i_r3 = i0.ɵɵnextContext().index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"left\", j_r6 * ctx_r4.sizebox + \"px\")(\"top\", i_r3 * ctx_r4.sizebox + \"px\")(\"background-color\", ctx_r4.isActiveCell(i_r3, j_r6) ? ctx_r4.getCellColor(ctx_r4.pla) : ctx_r4.getCellColor(cell_r5 == null ? null : cell_r5.player))(\"border\", ctx_r4.isActiveCell(i_r3, j_r6) ? \"2px solid yellow\" : \"\")(\"width\", ctx_r4.sizebox - 1, \"px\")(\"height\", ctx_r4.sizebox - 1, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", \"\", \" \");\n  }\n}\n\nfunction MatrixComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatrixComponent_div_15_div_1_Template, 2, 13, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r2);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService;\n    this.rows = 80; // Fila para la celda a actualizar\n\n    this.cols = 80; // Columna para la celda a actualizar\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 2; // Jugador para la celda a actualizar\n\n    this.activeCell = null;\n    this.visitedCells = [];\n    this.isEnabled = true;\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n    this.sizebox = 21; // Tamaño de una celda + 1 (para el espacio entre celdas)\n\n    this.teclaPresionada = false;\n    this.intervalo = 100; // Intervalo inicial en milisegundos\n  }\n\n  ngOnInit() {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('keyup', this.handleKeyUp.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('keyup', this.handleKeyUp.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  handleIncomingMessage(message) {\n    if (message.action === 'updateMatrix') {\n      this.matrix = message.data.matrix;\n    }\n\n    if (message.action === 'updateCell') {\n      const {\n        row,\n        column,\n        player\n      } = message.data;\n      this.matrix[row][column] = player;\n      console.log('asasasasasasasasasasassaasasassa');\n      this.teclaPresionada = false;\n    }\n  }\n\n  getMatrixPlayer() {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row, column, player, value) {\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      player,\n      value\n    });\n  }\n\n  updateCellsByPlayer(player, value, row, column) {\n    this.websocketService.sendMessage('updateCellsByPlayer', {\n      player,\n      value,\n      row,\n      column\n    });\n  }\n\n  getCellColor(player) {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n\n      case '2':\n        return 'red';\n\n      case '3':\n        return 'green';\n\n      case '4':\n        return 'gray';\n\n      default:\n        return 'lightblue';\n    }\n  }\n\n  handleKeyDown(event) {\n    event.preventDefault();\n    if (event.repeat) return; // Si la tecla está siendo mantenida presionada, no hacer nada\n\n    this.teclaPresionada = true;\n    console.log('Tecla presionada');\n    this.move(event); // Realizar acción una vez al inicio\n\n    this.intervalo = 1000; // Reiniciar intervalo cada vez que se presiona la tecla\n  }\n\n  move(event) {\n    if (this.teclaPresionada) {\n      console.log('entro');\n\n      if (this.isEnabled) {\n        let {\n          row,\n          col\n        } = this.activeCell || {\n          row: 0,\n          col: 0\n        };\n\n        switch (event.key) {\n          case 'ArrowUp':\n            row = Math.max(-1, row - 1);\n            break;\n\n          case 'ArrowDown':\n            row = Math.min(this.rows, row + 1);\n            break;\n\n          case 'ArrowLeft':\n            col = Math.max(-1, col - 1);\n            break;\n\n          case 'ArrowRight':\n            col = Math.min(this.cols, col + 1);\n            break;\n\n          default:\n            return;\n        }\n\n        if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n          this.isEnabled = false;\n          this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n        } else {\n          this.setActiveCell(row, col);\n        }\n      }\n\n      if (!this.teclaPresionada) {\n        console.log('llevolevo');\n        setTimeout(() => this.move(event), this.intervalo);\n      } // Reducir el intervalo para acelerar la repetición\n\n\n      if (this.intervalo > 20) {\n        this.intervalo -= 5; // Puedes ajustar este valor según sea necesario\n      }\n    }\n  }\n\n  handleKeyUp(event) {\n    this.teclaPresionada = false;\n\n    if (!this.scrollContainer || !this.scrollContainer.nativeElement) {\n      return;\n    }\n  }\n\n  setActiveCell(row, col) {\n    console.log('row ' + row + 'col ' + col);\n    this.updateCell(row, col, this.pla, 0);\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = (this.sizebox * (this.rows + 16) - this.windowHeight) / this.rows * row;\n    scrollContainerEl.scrollLeft = (this.sizebox * (this.cols + 16) - this.windowWidth) / this.cols * col;\n    this.activeCell = {\n      row,\n      col\n    };\n    this.visitedCells.push({\n      row,\n      col\n    });\n  }\n\n  isActiveCell(row, col) {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  updateWindowSize() {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n  getCellPlayer(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellPlayer = yield _this.websocketService.sendMessage('getCellPlayer', {\n          row,\n          column\n        });\n        return cellPlayer;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error);\n        return null;\n      }\n    })();\n  }\n\n  createMatrix(row, column) {\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  }\n\n  dropMatrix(row, column) {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  viewQuery: function MatrixComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n    }\n  },\n  decls: 16,\n  vars: 10,\n  consts: [[1, \"container\"], [1, \"update-cell-form\"], [\"type\", \"text\", \"placeholder\", \"Jugador\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [1, \"update-button\", 3, \"click\"], [\"tabindex\", \"0\", 1, \"scroll-container\"], [\"scrollContainer\", \"\"], [\"tabindex\", \"0\", 1, \"grid-container\", 3, \"keydown\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"cell\", 3, \"left\", \"top\", \"background-color\", \"border\", \"width\", \"height\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"cell\", 3, \"click\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Jugador:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.pla = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_5_listener() {\n        return ctx.createMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(6, \"Crear matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_7_listener() {\n        return ctx.dropMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(8, \"Borrar matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_9_listener() {\n        return ctx.getMatrixPlayer();\n      });\n      i0.ɵɵtext(10, \"Cargar matrix\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"div\", 4, 5)(14, \"div\", 6);\n      i0.ɵɵlistener(\"keydown\", function MatrixComponent_Template_div_keydown_14_listener($event) {\n        return ctx.handleKeyDown($event);\n      });\n      i0.ɵɵtemplate(15, MatrixComponent_div_15_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.pla);\n      i0.ɵɵadvance(8);\n      i0.ɵɵstyleProp(\"height\", ctx.windowHeight, \"px\")(\"padding\", ctx.sizebox * 6, \"px\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"width\", ctx.sizebox * ctx.rows + 20, \"px\")(\"height\", ctx.sizebox * ctx.cols + 20, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\".html[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]{\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.scroll-container[_ngcontent-%COMP%] {\\r\\n  width: 100%; \\r\\n  overflow: auto; \\r\\n  box-sizing: border-box; \\r\\n}\\r\\n\\r\\n.grid-container[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.cell[_ngcontent-%COMP%] {\\r\\n  border: 1px solid rgb(37, 37, 37);\\r\\n  display: inline-block;\\r\\n  text-align: center;\\r\\n  vertical-align: middle;\\r\\n  position: absolute;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.cell.active[_ngcontent-%COMP%] {\\r\\n  border: 2px solid rgb(248, 248, 246);\\r\\n  z-index: 2; \\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsV0FBVyxFQUFFLDJCQUEyQjtFQUN4QyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsVUFBVTtBQUNaOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLFVBQVU7QUFDWiIsImZpbGUiOiJtYXRyaXguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5odG1sIC5ib2R5e1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5zY3JvbGwtY29udGFpbmVyIHtcclxuICB3aWR0aDogMTAwJTsgLyogbyBlbCB0YW1hw7FvIHF1ZSBkZXNlZXMgKi9cclxuICBvdmVyZmxvdzogYXV0bzsgLyogSGFiaWxpdGEgZWwgZGVzcGxhemFtaWVudG8gKi9cclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyBcclxufVxyXG5cclxuLmdyaWQtY29udGFpbmVyIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5jZWxsIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMzcsIDM3LCAzNyk7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiAxO1xyXG59XHJcblxyXG4uY2VsbC5hY3RpdmUge1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYigyNDgsIDI0OCwgMjQ2KTtcclxuICB6LWluZGV4OiAyOyBcclxufVxyXG4iXX0= */\"]\n});","map":{"version":3,"mappings":";AAEA,SAAoBA,UAApB,QAAsC,eAAtC;;;;;;;;;;;ICYMC;IAQKA;MAAA;MAAA;MAAA;MAAA;MAAA,OAASA,gDAAT;IAA4B,CAA5B;IACHA;IACFA;;;;;;;;IATKA,qDAAiC,KAAjC,EAAiCC,4BAAjC,EAAiC,kBAAjC,EAAiCC,gIAAjC,EAAiC,QAAjC,EAAiCA,yDAAjC,EAAiC,OAAjC,EAAiCA,kBAAjC,EAAiC,IAAjC,EAAiC,QAAjC,EAAiCA,kBAAjC,EAAiC,IAAjC;IAQHF;IAAAA;;;;;;IAVJA;IACEA;IAWFA;;;;;IAXwBA;IAAAA;;;;ADH5B,OAAM,MAAOG,eAAP,CAAsB;EAoB1BC,YAAoBC,gBAApB,EAAsD;IAAlC;IAfpB,YAAe,EAAf,CAesD,CAfnC;;IACnB,YAAe,EAAf,CAcsD,CAdnC;;IACnB,cAAkB,EAAlB,CAasD,CAbhC;;IACtB,WAAc,CAAd,CAYsD,CAZrC;;IACjB,WAAc,CAAd,CAWsD,CAXrC;;IACjB,WAAc,CAAd,CAUsD,CAVrC;;IACjB,WAAc,CAAd,CASsD,CATrC;;IAEjB,kBAAkD,IAAlD;IACA,oBAA+C,EAA/C;IACA,iBAAqB,IAArB;IACA,mBAAsBC,MAAM,CAACC,UAA7B;IACA,oBAAuBD,MAAM,CAACE,WAAP,GAAqB,EAA5C;IACA,eAAU,EAAV,CAEsD,CAFxC;;IAkEd,uBAA2B,KAA3B;IACA,iBAAoB,GAApB,CAjEsD,CAiE7B;EAjEkC;;EAE3DC,QAAQ;IACNH,MAAM,CAACI,gBAAP,CAAwB,SAAxB,EAAmC,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAnC;IACAN,MAAM,CAACI,gBAAP,CAAwB,OAAxB,EAAiC,KAAKG,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAjC;IACAN,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkC,KAAKI,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAlC;IACA,KAAKG,cAAL;IACA,KAAKC,eAAL;EACD;;EAEDC,WAAW;IACT;IACAX,MAAM,CAACY,mBAAP,CAA2B,SAA3B,EAAsC,KAAKP,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAtC;IACAN,MAAM,CAACY,mBAAP,CAA2B,OAA3B,EAAoC,KAAKL,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAApC;IACAN,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqC,KAAKJ,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAArC;EACD;;EAEOG,cAAc;IACpB,MAAMI,MAAM,GAAG,KAAKd,gBAAL,CAAsBe,UAAtB,EAAf;IACAD,MAAM,CAACE,SAAP,CAAkBC,OAAD,IAAY;MAC3B,KAAKC,qBAAL,CAA2BD,OAA3B;IACD,CAFD;EAGD;;EAEOC,qBAAqB,CAACD,OAAD,EAAa;IACxC,IAAIA,OAAO,CAACE,MAAR,KAAmB,cAAvB,EAAuC;MACrC,KAAKC,MAAL,GAAeH,OAAO,CAACI,IAAR,CAAaD,MAA5B;IACD;;IACD,IAAIH,OAAO,CAACE,MAAR,KAAmB,YAAvB,EAAqC;MACnC,MAAM;QAAEG,GAAF;QAAOC,MAAP;QAAeC;MAAf,IAA0BP,OAAO,CAACI,IAAxC;MACA,KAAKD,MAAL,CAAYE,GAAZ,EAAiBC,MAAjB,IAA2BC,MAA3B;MACAC,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACA,KAAKC,eAAL,GAAuB,KAAvB;IACD;EACF;;EAEDhB,eAAe;IACb,KAAKX,gBAAL,CAAsB4B,WAAtB,CAAkC,WAAlC,EAA+C,EAA/C;EACD;;EAEDC,UAAU,CAACP,GAAD,EAAcC,MAAd,EAA8BC,MAA9B,EAA8CM,KAA9C,EAA2D;IACnE,KAAK9B,gBAAL,CAAsB4B,WAAtB,CAAkC,SAAlC,EAA6C;MAAEN,GAAF;MAAOC,MAAP;MAAeC,MAAf;MAAuBM;IAAvB,CAA7C;EACD;;EAEDC,mBAAmB,CAACP,MAAD,EAAiBM,KAAjB,EAAuCR,GAAvC,EAAoDC,MAApD,EAAkE;IACnF,KAAKvB,gBAAL,CAAsB4B,WAAtB,CAAkC,qBAAlC,EAAyD;MAAEJ,MAAF;MAAUM,KAAV;MAAiBR,GAAjB;MAAsBC;IAAtB,CAAzD;EACD;;EAEDS,YAAY,CAACR,MAAD,EAAsB;IAChC,QAAQA,MAAM,GAAG,EAAjB;MACE,KAAK,GAAL;QACE,OAAO,MAAP;;MACF,KAAK,GAAL;QACE,OAAO,KAAP;;MACF,KAAK,GAAL;QACE,OAAO,OAAP;;MACF,KAAK,GAAL;QACE,OAAO,MAAP;;MACF;QACE,OAAO,WAAP;IAVJ;EAYD;;EAMDlB,aAAa,CAAC2B,KAAD,EAAqB;IAChCA,KAAK,CAACC,cAAN;IACA,IAAID,KAAK,CAACE,MAAV,EAAkB,OAFc,CAEN;;IAC1B,KAAKR,eAAL,GAAuB,IAAvB;IACAF,OAAO,CAACC,GAAR,CAAY,kBAAZ;IACA,KAAKU,IAAL,CAAUH,KAAV,EALgC,CAKd;;IAClB,KAAKI,SAAL,GAAiB,IAAjB,CANgC,CAMT;EACxB;;EAEDD,IAAI,CAACH,KAAD,EAAqB;IACvB,IAAI,KAAKN,eAAT,EAA0B;MACxBF,OAAO,CAACC,GAAR,CAAY,OAAZ;;MACA,IAAI,KAAKY,SAAT,EAAoB;QAClB,IAAI;UAAEhB,GAAF;UAAOiB;QAAP,IAAe,KAAKC,UAAL,IAAmB;UAAElB,GAAG,EAAE,CAAP;UAAUiB,GAAG,EAAE;QAAf,CAAtC;;QACA,QAAQN,KAAK,CAACQ,GAAd;UACE,KAAK,SAAL;YACEnB,GAAG,GAAGoB,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAarB,GAAG,GAAG,CAAnB,CAAN;YACA;;UACF,KAAK,WAAL;YACEA,GAAG,GAAGoB,IAAI,CAACE,GAAL,CAAS,KAAKC,IAAd,EAAoBvB,GAAG,GAAG,CAA1B,CAAN;YACA;;UACF,KAAK,WAAL;YACEiB,GAAG,GAAGG,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaJ,GAAG,GAAG,CAAnB,CAAN;YACA;;UACF,KAAK,YAAL;YACEA,GAAG,GAAGG,IAAI,CAACE,GAAL,CAAS,KAAKE,IAAd,EAAoBP,GAAG,GAAG,CAA1B,CAAN;YACA;;UACF;YACE;QAdJ;;QAgBA,IAAIjB,GAAG,IAAI,KAAKuB,IAAZ,IAAoBN,GAAG,IAAI,KAAKO,IAAhC,IAAwCxB,GAAG,GAAG,CAA9C,IAAmDiB,GAAG,GAAG,CAA7D,EAAgE;UAC9D,KAAKD,SAAL,GAAiB,KAAjB;UACA,KAAKP,mBAAL,CAAyB,KAAKgB,GAA9B,EAAmC,IAAnC,EAAyC,KAAKF,IAA9C,EAAoD,KAAKC,IAAzD;QACD,CAHD,MAGO;UACL,KAAKE,aAAL,CAAmB1B,GAAnB,EAAwBiB,GAAxB;QACD;MACF;;MACD,IAAI,CAAC,KAAKZ,eAAV,EAA2B;QACzBF,OAAO,CAACC,GAAR,CAAY,WAAZ;QACAuB,UAAU,CAAC,MAAM,KAAKb,IAAL,CAAUH,KAAV,CAAP,EAAyB,KAAKI,SAA9B,CAAV;MACD,CA9BuB,CA+BxB;;;MACA,IAAI,KAAKA,SAAL,GAAiB,EAArB,EAAyB;QACvB,KAAKA,SAAL,IAAkB,CAAlB,CADuB,CACF;MACtB;IACF;EACF;;EAED7B,WAAW,CAACyB,KAAD,EAAqB;IAC9B,KAAKN,eAAL,GAAuB,KAAvB;;IACA,IAAI,CAAC,KAAKuB,eAAN,IAAyB,CAAC,KAAKA,eAAL,CAAqBC,aAAnD,EAAkE;MAChE;IACD;EACF;;EAEDH,aAAa,CAAC1B,GAAD,EAAciB,GAAd,EAAyB;IACpCd,OAAO,CAACC,GAAR,CAAY,SAASJ,GAAT,GAAe,MAAf,GAAwBiB,GAApC;IACA,KAAKV,UAAL,CAAgBP,GAAhB,EAAqBiB,GAArB,EAA0B,KAAKQ,GAA/B,EAAoC,CAApC;IACA,MAAMK,iBAAiB,GAAG,KAAKF,eAAL,CAAqBC,aAA/C;IACAC,iBAAiB,CAACC,SAAlB,GAA8B,CAAE,KAAKC,OAAN,IAAkB,KAAKT,IAAL,GAAY,EAA9B,IAAoC,KAAKU,YAA1C,IAA0D,KAAKV,IAA/D,GAAuEvB,GAArG;IACA8B,iBAAiB,CAACI,UAAlB,GAA+B,CAAE,KAAKF,OAAN,IAAkB,KAAKR,IAAL,GAAY,EAA9B,IAAoC,KAAKW,WAA1C,IAAyD,KAAKX,IAA9D,GAAsEP,GAArG;IACA,KAAKC,UAAL,GAAkB;MAAElB,GAAF;MAAOiB;IAAP,CAAlB;IACA,KAAKmB,YAAL,CAAkBC,IAAlB,CAAuB;MAAErC,GAAF;MAAOiB;IAAP,CAAvB;EAGD;;EAEDqB,YAAY,CAACtC,GAAD,EAAciB,GAAd,EAAyB;IACnC,OAAO,KAAKC,UAAL,EAAiBlB,GAAjB,KAAyBA,GAAzB,IAAgC,KAAKkB,UAAL,EAAiBD,GAAjB,KAAyBA,GAAhE;EACD;;EAED9B,gBAAgB;IACd,KAAKgD,WAAL,GAAmBxD,MAAM,CAACC,UAA1B;IACA,KAAKqD,YAAL,GAAoBtD,MAAM,CAACE,WAAP,GAAqB,EAAzC;EACD;;EAMK0D,aAAa,CAACvC,GAAD,EAAcC,MAAd,EAA4B;IAAA;;IAAA;MAC7C,IAAI;QACF,MAAMuC,UAAU,SAAS,KAAI,CAAC9D,gBAAL,CAAsB4B,WAAtB,CAAkC,eAAlC,EAAmD;UAAEN,GAAF;UAAOC;QAAP,CAAnD,CAAzB;QACA,OAAOuC,UAAP;MACD,CAHD,CAGE,OAAOC,KAAP,EAAc;QACdtC,OAAO,CAACsC,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;QACA,OAAO,IAAP;MACD;IAP4C;EAQ9C;;EAEDC,YAAY,CAAC1C,GAAD,EAAcC,MAAd,EAA4B;IACtC,KAAKvB,gBAAL,CAAsB4B,WAAtB,CAAkC,cAAlC,EAAkD;MAAEN,GAAF;MAAOC;IAAP,CAAlD;EACD;;EAED0C,UAAU,CAAC3C,GAAD,EAAcC,MAAd,EAA4B;IACpC,KAAKvB,gBAAL,CAAsB4B,WAAtB,CAAkC,YAAlC,EAAgD,EAAhD;EACD;;AAvLyB;;;mBAAf9B,iBAAeH;AAAA;;;QAAfG;EAAeoE;EAAAC;IAAA;;;;;;;;;;;;;;;MCV5BxE,+BAAuB,CAAvB,EAAuB,KAAvB,EAAuB,CAAvB,EAAuB,CAAvB,EAAuB,OAAvB;MAGWA;MAAQA;MACfA;MAA6DA;QAAA;MAAA;MAA7DA;MACAA;MAA8BA;QAAA,OAASyE,oCAAT;MAAiC,CAAjC;MAAmCzE;MAAYA;MAC7EA;MAA8BA;QAAA,OAASyE,kCAAT;MAA+B,CAA/B;MAAiCzE;MAAaA;MAC5EA;MAA8BA;QAAA,OAASyE,qBAAT;MAA0B,CAA1B;MAA4BzE;MAAaA;MAEzEA;MACAA,mCAA8H,EAA9H,EAA8H,KAA9H,EAA8H,CAA9H;MACKA;QAAA,OAAWyE,yBAAX;MAAgC,CAAhC;MACHzE;MAaFA;;;;MArB+DA;MAAAA;MAMHA;MAAAA,iDAAgC,SAAhC,EAAgCyE,eAAhC,EAAgC,IAAhC;MACezE;MAAAA,2DAAqC,QAArC,EAAqCyE,2BAArC,EAAqC,IAArC;MACpDzE;MAAAA","names":["ElementRef","i0","i_r3","ctx_r4","MatrixComponent","constructor","websocketService","window","innerWidth","innerHeight","ngOnInit","addEventListener","handleKeyDown","bind","handleKeyUp","updateWindowSize","setupWebSocket","getMatrixPlayer","ngOnDestroy","removeEventListener","socket","getMessage","subscribe","message","handleIncomingMessage","action","matrix","data","row","column","player","console","log","teclaPresionada","sendMessage","updateCell","value","updateCellsByPlayer","getCellColor","event","preventDefault","repeat","move","intervalo","isEnabled","col","activeCell","key","Math","max","min","rows","cols","pla","setActiveCell","setTimeout","scrollContainer","nativeElement","scrollContainerEl","scrollTop","sizebox","windowHeight","scrollLeft","windowWidth","visitedCells","push","isActiveCell","getCellPlayer","cellPlayer","error","createMatrix","dropMatrix","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts","C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\nimport { ViewChild, ElementRef } from '@angular/core';\n\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\n\nexport class MatrixComponent implements OnInit {\n  @ViewChild('scrollContainer') scrollContainer!: ElementRef;\n\n\n\n  rows: number = 80; // Fila para la celda a actualizar\n  cols: number = 80; // Columna para la celda a actualizar\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 2; // Jugador para la celda a actualizar\n\n  activeCell: { row: number, col: number } | null = null;\n  visitedCells: { row: number, col: number }[] = [];\n  isEnabled: boolean = true;\n  windowWidth: number = window.innerWidth;\n  windowHeight: number = window.innerHeight - 56;\n  sizebox = 21; // Tamaño de una celda + 1 (para el espacio entre celdas)\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('keyup', this.handleKeyUp.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('keyup', this.handleKeyUp.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  private handleIncomingMessage(message: any): void {\n    if (message.action === 'updateMatrix') {\n      this.matrix = (message.data.matrix);\n    }\n    if (message.action === 'updateCell') {\n      const { row, column, player } = message.data;\n      this.matrix[row][column] = player;\n      console.log('asasasasasasasasasasassaasasassa')\n      this.teclaPresionada = false;\n    }\n  }\n\n  getMatrixPlayer(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row: number, column: number, player: number, value: number): void {\n    this.websocketService.sendMessage('updCell', { row, column, player, value });\n  }\n\n  updateCellsByPlayer(player: number, value: number | null, row: number, column: number) {\n    this.websocketService.sendMessage('updateCellsByPlayer', { player, value, row, column });\n  }\n\n  getCellColor(player: number | null): any {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n      case '2':\n        return 'red';\n      case '3':\n        return 'green';\n      case '4':\n        return 'gray';\n      default:\n        return 'lightblue';\n    }\n  }\n\n\n  teclaPresionada: boolean = false;\n  intervalo: number = 100; // Intervalo inicial en milisegundos\n\n  handleKeyDown(event: KeyboardEvent): void {\n    event.preventDefault();\n    if (event.repeat) return; // Si la tecla está siendo mantenida presionada, no hacer nada\n    this.teclaPresionada = true;\n    console.log('Tecla presionada');\n    this.move(event); // Realizar acción una vez al inicio\n    this.intervalo = 1000; // Reiniciar intervalo cada vez que se presiona la tecla\n  }\n\n  move(event: KeyboardEvent): void {\n    if (this.teclaPresionada) {\n      console.log('entro');\n      if (this.isEnabled) {\n        let { row, col } = this.activeCell || { row: 0, col: 0 };\n        switch (event.key) {\n          case 'ArrowUp':\n            row = Math.max(-1, row - 1);\n            break;\n          case 'ArrowDown':\n            row = Math.min(this.rows, row + 1);\n            break;\n          case 'ArrowLeft':\n            col = Math.max(-1, col - 1);\n            break;\n          case 'ArrowRight':\n            col = Math.min(this.cols, col + 1);\n            break;\n          default:\n            return;\n        }\n        if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n          this.isEnabled = false;\n          this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n        } else {\n          this.setActiveCell(row, col);\n        }\n      }\n      if (!this.teclaPresionada) {\n        console.log('llevolevo')\n        setTimeout(() => this.move(event), this.intervalo);\n      }\n      // Reducir el intervalo para acelerar la repetición\n      if (this.intervalo > 20) {\n        this.intervalo -= 5; // Puedes ajustar este valor según sea necesario\n      }\n    }\n  }\n\n  handleKeyUp(event: KeyboardEvent) {\n    this.teclaPresionada = false;\n    if (!this.scrollContainer || !this.scrollContainer.nativeElement) {\n      return;\n    }\n  }\n\n  setActiveCell(row: number, col: number): void {\n    console.log('row ' + row + 'col ' + col)\n    this.updateCell(row, col, this.pla, 0);\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = ((this.sizebox) * (this.rows + 16) - this.windowHeight) / this.rows * (row);\n    scrollContainerEl.scrollLeft = ((this.sizebox) * (this.cols + 16) - this.windowWidth) / this.cols * (col);\n    this.activeCell = { row, col };\n    this.visitedCells.push({ row, col });\n\n\n  }\n\n  isActiveCell(row: number, col: number): boolean {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  updateWindowSize(): void {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n\n\n\n\n  async getCellPlayer(row: number, column: number): Promise<any> {\n    try {\n      const cellPlayer = await this.websocketService.sendMessage('getCellPlayer', { row, column });\n      return cellPlayer;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      return null;\n    }\n  }\n\n  createMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  dropMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n}\n","\n<div class=\"container\">\n  \n  <div class=\"update-cell-form\">\n    <label>Jugador:</label>\n    <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n    <button class=\"update-button\" (click)=\"createMatrix(rows, cols)\">Crear matrix</button>\n    <button class=\"update-button\" (click)=\"dropMatrix(rows, cols)\">Borrar matrix</button>\n    <button class=\"update-button\" (click)=\"getMatrixPlayer()\">Cargar matrix</button>\n  </div>\n  <br>\n  <div class=\"scroll-container\" #scrollContainer tabindex=\"0\" [style.height.px]=\"windowHeight\" [style.padding.px]=\"sizebox * 6\">\n  <div (keydown)=\"handleKeyDown($event)\" tabindex=\"0\" class=\"grid-container\" [style.width.px]=\"sizebox * rows +20\" [style.height.px]=\" sizebox *cols +20\">\n    <div *ngFor=\"let row of matrix; let i = index\">\n      <div *ngFor=\"let cell of row; let j = index\"\n           [style.left]=\"j * sizebox + 'px'\" \n           [style.top]=\"i * sizebox + 'px'\"\n           [style.background-color]=\"isActiveCell(i, j) ? getCellColor(pla) : getCellColor(cell?.player)\"\n           [style.border]=\"isActiveCell(i, j) ? '2px solid yellow' : ''\"\n           [style.width.px]=\"sizebox -1\"\n           [style.height.px]=\"sizebox -1\"\n           class=\"cell\"\n           (click)=\"setActiveCell(i, j)\">\n        {{''}}\n      </div>\n    </div>\n  </div>\n  </div>\n  </div>\n  "]},"metadata":{},"sourceType":"module"}