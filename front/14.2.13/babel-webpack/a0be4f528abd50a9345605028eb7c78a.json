{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix - copia/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"scrollContainer\"];\n\nfunction MatrixComponent_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r5 = ctx.$implicit;\n    const j_r6 = ctx.index;\n    const i_r3 = i0.ɵɵnextContext().index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"left\", j_r6 * ctx_r4.sizebox + \"px\")(\"top\", i_r3 * ctx_r4.sizebox + \"px\")(\"background-color\", ctx_r4.isActiveCell(i_r3, j_r6) ? ctx_r4.getPlayerColor(ctx_r4.pla) : ctx_r4.getPlayerColor(cell_r5 == null ? null : cell_r5.player))(\"border\", ctx_r4.isActiveCell(i_r3, j_r6) ? \"2px solid yellow\" : \"\")(\"width\", ctx_r4.sizebox - 1, \"px\")(\"height\", ctx_r4.sizebox - 1, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", i_r3, \",\", j_r6, \" \");\n  }\n}\n\nfunction MatrixComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatrixComponent_div_15_div_1_Template, 2, 14, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r2);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService;\n    this.rows = 50; // Fila para la celda a actualizar\n\n    this.cols = 50; // Columna para la celda a actualizar\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.matTemp = [];\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 2; // Jugador para la celda a actualizar\n\n    this.dir = 'n';\n    this.activeCell = null;\n    this.visitedCells = [];\n    this.isEnabled = true;\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n    this.sizebox = 18; // Tamaño de una celda + 1 (para el espacio entre celdas)\n  }\n\n  ngOnInit() {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngAfterViewInit() {\n    //entrega las coordenadas de inicio del juego no importa el sitio\n    let {\n      row,\n      col\n    } = this.getInitialPosition(this.rows, this.cols);\n    this.setActiveCell(row, col);\n    this.setActiveCell(row, col + 1);\n    this.setActiveCell(row, col + 2);\n    this.setActiveCell(row + 1, col);\n    this.setActiveCell(row + 1, col + 1);\n    this.setActiveCell(row + 1, col + 2);\n    this.setActiveCell(row + 2, col);\n    this.setActiveCell(row + 2, col + 1);\n    this.setActiveCell(row + 2, col + 2);\n    row = row + 1;\n    col = col + 1;\n    this.activeCell = {\n      row,\n      col\n    };\n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  handleIncomingMessage(message) {\n    if (message.action === 'updateMatrix') {\n      this.matrix = message.data.matrix;\n    }\n\n    if (message.action === 'updateCell') {\n      const {\n        row,\n        column,\n        player\n      } = message.data;\n      this.matrix[row][column] = player;\n    }\n  }\n\n  getMatrixPlayer() {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row, column, player, value) {\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      player,\n      value\n    });\n  }\n\n  updateCellsByPlayer(player, value, row, column) {\n    this.websocketService.sendMessage('updateCellsByPlayer', {\n      player,\n      value,\n      row,\n      column\n    });\n  }\n\n  getPlayerColor(player) {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n\n      case '2':\n        return 'red';\n\n      case '3':\n        return 'green';\n\n      case '4':\n        return 'gray';\n\n      default:\n        return 'lightblue';\n    }\n  }\n\n  handleKeyDown(event) {\n    event.preventDefault();\n\n    switch (event.key) {\n      case 'ArrowUp':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'u';\n        break;\n\n      case 'ArrowDown':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'd';\n        break;\n\n      case 'ArrowLeft':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'l';\n        break;\n\n      case 'ArrowRight':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'r';\n        break;\n\n      default:\n        return;\n    }\n\n    let {\n      row,\n      col\n    } = this.activeCell || {\n      row: 0,\n      col: 0\n    };\n    this.move(row, col, this.dir);\n  }\n\n  move(mRow, mCol, dir) {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    if (mRow >= this.rows || mCol >= this.cols || mRow < 0 || mCol < 0) {\n      this.isEnabled = false;\n      this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n      return;\n    }\n\n    console.log(mRow, mCol);\n    this.setActiveCell(mRow, mCol);\n\n    switch (dir) {\n      case 'u':\n        mRow = Math.max(-1, mRow - 1);\n        break;\n\n      case 'd':\n        mRow = Math.min(this.rows, mRow + 1);\n        break;\n\n      case 'l':\n        mCol = Math.max(-1, mCol - 1);\n        break;\n\n      case 'r':\n        mCol = Math.min(this.cols, mCol + 1);\n        break;\n\n      default:\n        return;\n    }\n\n    this.moveTimeout = setTimeout(() => {\n      this.activeCell = {\n        row: mRow,\n        col: mCol\n      };\n      this.move(mRow, mCol, dir);\n    }, 300); // Puedes ajustar el tiempo aquí para controlar la velocidad del movimiento\n  }\n\n  setActiveCell(row, col) {\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = (this.sizebox * (this.rows + 16) - this.windowHeight) / this.rows * row;\n    scrollContainerEl.scrollLeft = (this.sizebox * (this.cols + 16) - this.windowWidth) / this.cols * col; //this.updateCell(row, col, this.pla, 0);\n  }\n\n  getRandom(min, max) {\n    // Calcula el valor dentro del rango (min, max)\n    console.log('min: ' + min + ', max:' + max);\n    const num = Math.floor(Math.random() * (max - min)) + min;\n    return num;\n  }\n\n  fill(urow, ucol) {\n    try {\n      const {\n        player,\n        value\n      } = this.matrix[urow][ucol];\n\n      if (player === this.pla) {\n        return;\n      }\n\n      this.updateCell(urow, ucol, this.pla, 0);\n      this.fill(urow + 1, ucol);\n      this.fill(urow - 1, ucol);\n      this.fill(urow, ucol + 1);\n      this.fill(urow, ucol - 1);\n    } catch (err) {}\n  }\n\n  isActiveCell(row, col) {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  updateWindowSize() {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n  getInitialPosition(rows, cols) {\n    const row = Math.floor(Math.random() * (rows - 4)) + 2;\n    const col = Math.floor(Math.random() * (cols - 4)) + 2; // Generar un número aleatorio entre 0 y (rows - 1)\n\n    return {\n      row,\n      col\n    };\n  }\n\n  getCellPlayer(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellPlayer = yield _this.websocketService.sendMessage('getCellPlayer', {\n          row,\n          column\n        });\n        return cellPlayer;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error);\n        return null;\n      }\n    })();\n  }\n\n  createMatrix(row, column) {\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  }\n\n  dropMatrix(row, column) {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n  getBounds(cells) {\n    return cells.reduce((acc, cell) => {\n      if (cell.row < acc.minRow) acc.minRow = cell.row;\n      if (cell.row > acc.maxRow) acc.maxRow = cell.row;\n      if (cell.col < acc.minCol) acc.minCol = cell.col;\n      if (cell.col > acc.maxCol) acc.maxCol = cell.col;\n      return acc;\n    }, {\n      minRow: cells[0]?.row || 0,\n      maxRow: cells[0]?.row || 0,\n      minCol: cells[0]?.col || 0,\n      maxCol: cells[0]?.col || 0\n    });\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  viewQuery: function MatrixComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n    }\n  },\n  decls: 16,\n  vars: 10,\n  consts: [[1, \"container\"], [1, \"update-cell-form\"], [\"type\", \"text\", \"placeholder\", \"Jugador\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [1, \"update-button\", 3, \"click\"], [\"tabindex\", \"0\", 1, \"scroll-container\"], [\"scrollContainer\", \"\"], [\"tabindex\", \"0\", 1, \"grid-container\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"cell\", 3, \"left\", \"top\", \"background-color\", \"border\", \"width\", \"height\", 4, \"ngFor\", \"ngForOf\"], [1, \"cell\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Jugador:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.pla = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_5_listener() {\n        return ctx.createMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(6, \"Crear matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_7_listener() {\n        return ctx.dropMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(8, \"Borrar matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_9_listener() {\n        return ctx.getMatrixPlayer();\n      });\n      i0.ɵɵtext(10, \"Cargar matrix\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"div\", 4, 5)(14, \"div\", 6);\n      i0.ɵɵtemplate(15, MatrixComponent_div_15_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.pla);\n      i0.ɵɵadvance(8);\n      i0.ɵɵstyleProp(\"height\", ctx.windowHeight, \"px\")(\"padding\", ctx.sizebox * 6, \"px\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"width\", ctx.sizebox * ctx.rows + 20, \"px\")(\"height\", ctx.sizebox * ctx.cols + 20, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\".html[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]{\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.scroll-container[_ngcontent-%COMP%] {\\r\\n  width: 100%; \\r\\n  overflow: auto; \\r\\n  box-sizing: border-box; \\r\\n}\\r\\n\\r\\n.grid-container[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.cell[_ngcontent-%COMP%] {\\r\\n  border: 1px solid rgb(37, 37, 37);\\r\\n  display: inline-block;\\r\\n  text-align: center;\\r\\n  vertical-align: middle;\\r\\n  position: absolute;\\r\\n  padding: 4px;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.cell.active[_ngcontent-%COMP%] {\\r\\n  border: 2px solid rgb(248, 248, 246);\\r\\n  z-index: 2; \\r\\n  animation: blink 1s infinite alternate; \\r\\n}\\r\\n\\r\\n@keyframes blink {\\r\\n  from { opacity: 1; } \\r\\n  to { opacity: 0; } \\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsV0FBVyxFQUFFLDJCQUEyQjtFQUN4QyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsWUFBWTtFQUNaLFVBQVU7QUFDWjs7QUFFQTtFQUNFLG9DQUFvQztFQUNwQyxVQUFVO0VBQ1Ysc0NBQXNDLEVBQUUsMEJBQTBCO0FBQ3BFOztBQUVBO0VBQ0UsT0FBTyxVQUFVLEVBQUUsRUFBRSxzQkFBc0I7RUFDM0MsS0FBSyxVQUFVLEVBQUUsRUFBRSxvQkFBb0I7QUFDekMiLCJmaWxlIjoibWF0cml4LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaHRtbCAuYm9keXtcclxuICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcblxyXG4uc2Nyb2xsLWNvbnRhaW5lciB7XHJcbiAgd2lkdGg6IDEwMCU7IC8qIG8gZWwgdGFtYcOxbyBxdWUgZGVzZWVzICovXHJcbiAgb3ZlcmZsb3c6IGF1dG87IC8qIEhhYmlsaXRhIGVsIGRlc3BsYXphbWllbnRvICovXHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgXHJcbn1cclxuXHJcbi5ncmlkLWNvbnRhaW5lciB7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcblxyXG4uY2VsbCB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDM3LCAzNywgMzcpO1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgcGFkZGluZzogNHB4O1xyXG4gIHotaW5kZXg6IDE7XHJcbn1cclxuXHJcbi5jZWxsLmFjdGl2ZSB7XHJcbiAgYm9yZGVyOiAycHggc29saWQgcmdiKDI0OCwgMjQ4LCAyNDYpO1xyXG4gIHotaW5kZXg6IDI7IFxyXG4gIGFuaW1hdGlvbjogYmxpbmsgMXMgaW5maW5pdGUgYWx0ZXJuYXRlOyAvKiBBbmltYWNpw7NuIGRlIHBhcnBhZGVvICovXHJcbn1cclxuXHJcbkBrZXlmcmFtZXMgYmxpbmsge1xyXG4gIGZyb20geyBvcGFjaXR5OiAxOyB9IC8qIE9wYWNpZGFkIGNvbXBsZXRhICovXHJcbiAgdG8geyBvcGFjaXR5OiAwOyB9IC8qIE9wYWNpZGFkIG3DrW5pbWEgKi9cclxufVxyXG4iXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","i0","i_r3","ctx_r4","MatrixComponent","constructor","websocketService","window","innerWidth","innerHeight","ngOnInit","addEventListener","handleKeyDown","bind","updateWindowSize","setupWebSocket","getMatrixPlayer","ngAfterViewInit","row","col","getInitialPosition","rows","cols","setActiveCell","activeCell","ngOnDestroy","removeEventListener","socket","getMessage","subscribe","message","handleIncomingMessage","action","matrix","data","column","player","sendMessage","updateCell","value","updateCellsByPlayer","getPlayerColor","event","preventDefault","key","clearTimeout","moveTimeout","dir","move","mRow","mCol","isEnabled","pla","console","log","Math","max","min","setTimeout","scrollContainerEl","scrollContainer","nativeElement","scrollTop","sizebox","windowHeight","scrollLeft","windowWidth","getRandom","num","floor","random","fill","urow","ucol","err","isActiveCell","getCellPlayer","cellPlayer","error","createMatrix","dropMatrix","getBounds","cells","reduce","acc","cell","minRow","maxRow","minCol","maxCol","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts","C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\nimport { ViewChild, ElementRef } from '@angular/core';\n\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\n\nexport class MatrixComponent implements OnInit {\n  @ViewChild('scrollContainer') scrollContainer!: ElementRef;\n\n  rows: number = 50; // Fila para la celda a actualizar\n  cols: number = 50; // Columna para la celda a actualizar\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  matTemp: any[][] = [];\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 2; // Jugador para la celda a actualizar\n  dir: string ='n';\n\n  activeCell: { row: number, col: number } | null = null;\n  visitedCells: { row: number, col: number }[] = [];\n  isEnabled: boolean = true;\n  moveTimeout: any; // Referencia al setTimeout\n  windowWidth: number = window.innerWidth;\n  windowHeight: number = window.innerHeight - 56;\n  sizebox = 18; // Tamaño de una celda + 1 (para el espacio entre celdas)\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngAfterViewInit(): void {\n    //entrega las coordenadas de inicio del juego no importa el sitio\n    let { row, col } = this.getInitialPosition(this.rows, this.cols)\n    this.setActiveCell(row, col)\n    this.setActiveCell(row, col + 1)\n    this.setActiveCell(row, col + 2)\n    this.setActiveCell(row + 1, col)\n    this.setActiveCell(row + 1, col + 1)\n    this.setActiveCell(row + 1, col + 2)\n    this.setActiveCell(row + 2, col)\n    this.setActiveCell(row + 2, col + 1)\n    this.setActiveCell(row + 2, col + 2)\n    row = row + 1;\n    col = col + 1\n    this.activeCell = { row, col };\n    \n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  private handleIncomingMessage(message: any): void {\n    if (message.action === 'updateMatrix') {\n      this.matrix = (message.data.matrix);\n    }\n    if (message.action === 'updateCell') {\n      const { row, column, player } = message.data;\n      this.matrix[row][column] = player;\n    }\n  }\n\n\n  getMatrixPlayer(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row: number, column: number, player: number, value: number): void {\n    this.websocketService.sendMessage('updCell', { row, column, player, value });\n  }\n\n  updateCellsByPlayer(player: number, value: number | null, row: number, column: number) {\n    this.websocketService.sendMessage('updateCellsByPlayer', { player, value, row, column });\n  }\n\n  getPlayerColor(player: number | null): any {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n      case '2':\n        return 'red';\n      case '3':\n        return 'green';\n      case '4':\n        return 'gray';\n      default:\n        return 'lightblue';\n    }\n  }\n\n\n  handleKeyDown(event: KeyboardEvent): void {\n    event.preventDefault();\n    switch (event.key) {\n      case 'ArrowUp':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'u'\n        break;\n      case 'ArrowDown':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'd'\n        break;\n      case 'ArrowLeft':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'l'\n        break;\n      case 'ArrowRight':\n        clearTimeout(this.moveTimeout);\n        this.dir = 'r'\n        break;\n      default:\n        return;\n    }\n    let { row, col } = this.activeCell || { row: 0, col: 0 };\n    this.move(row, col,this.dir);\n  }\n\n  move(mRow: number, mCol: number, dir: string): void {\n    if (!this.isEnabled) {\n      return;\n    }\n    if (mRow >= this.rows || mCol >= this.cols || mRow < 0 || mCol < 0) {\n      this.isEnabled = false;\n      this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n      return;\n    }\n    console.log(mRow,mCol)\n    this.setActiveCell(mRow, mCol)\n    switch (dir) {\n      case 'u':\n        mRow = Math.max(-1, mRow - 1);\n        break;\n      case 'd':\n        mRow = Math.min(this.rows, mRow + 1);\n        break;\n      case 'l':\n        mCol = Math.max(-1, mCol - 1);\n        break;\n      case 'r':\n        mCol = Math.min(this.cols, mCol + 1);\n        break;\n      default:\n        return;\n    } this.moveTimeout = setTimeout(() => {\n      this.activeCell = { row:mRow, col:mCol };\n      this.move(mRow, mCol, dir);\n    }, 300); // Puedes ajustar el tiempo aquí para controlar la velocidad del movimiento\n\n  }\n\n\n  setActiveCell(row: number, col: number): void {\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = ((this.sizebox) * (this.rows + 16) - this.windowHeight) / this.rows * (row);\n    scrollContainerEl.scrollLeft = ((this.sizebox) * (this.cols + 16) - this.windowWidth) / this.cols * (col);\n    //this.updateCell(row, col, this.pla, 0);\n  }\n\n  getRandom(min: number, max: number): number {\n    // Calcula el valor dentro del rango (min, max)\n    console.log('min: ' + min + ', max:' + max)\n    const num = Math.floor(Math.random() * (max - min)) + min;\n    return num;\n  }\n  fill(urow: number, ucol: number): void {\n    try {\n      const { player, value } = this.matrix[urow][ucol]\n      if (player === this.pla) {\n        return;\n      }\n      this.updateCell(urow, ucol, this.pla, 0);\n      this.fill(urow + 1, ucol);\n      this.fill(urow - 1, ucol);\n      this.fill(urow, ucol + 1);\n      this.fill(urow, ucol - 1);\n    } catch (err) {\n    }\n  }\n\n\n  isActiveCell(row: number, col: number): boolean {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  updateWindowSize(): void {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n  public getInitialPosition(rows: number, cols: number): { row: number, col: number } {\n    const row = Math.floor(Math.random() * (rows - 4)) + 2;\n    const col = Math.floor(Math.random() * (cols - 4)) + 2; // Generar un número aleatorio entre 0 y (rows - 1)\n    return { row, col }\n  }\n\n  async getCellPlayer(row: number, column: number): Promise<any> {\n    try {\n      const cellPlayer = await this.websocketService.sendMessage('getCellPlayer', { row, column });\n      return cellPlayer;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      return null;\n    }\n  }\n\n  createMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  dropMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n\n  getBounds(cells: { row: number, col: number }[]): { minRow: number, maxRow: number, minCol: number, maxCol: number } {\n    return cells.reduce((acc, cell) => {\n      if (cell.row < acc.minRow) acc.minRow = cell.row;\n      if (cell.row > acc.maxRow) acc.maxRow = cell.row;\n      if (cell.col < acc.minCol) acc.minCol = cell.col;\n      if (cell.col > acc.maxCol) acc.maxCol = cell.col;\n      return acc;\n    }, {\n      minRow: cells[0]?.row || 0,\n      maxRow: cells[0]?.row || 0,\n      minCol: cells[0]?.col || 0,\n      maxCol: cells[0]?.col || 0\n    });\n  }\n\n}","\n<div class=\"container\">\n  \n  <div class=\"update-cell-form\">\n    <label>Jugador:</label>\n    <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n    <button class=\"update-button\" (click)=\"createMatrix(rows, cols)\">Crear matrix</button>\n    <button class=\"update-button\" (click)=\"dropMatrix(rows, cols)\">Borrar matrix</button>\n    <button class=\"update-button\" (click)=\"getMatrixPlayer()\">Cargar matrix</button>\n  </div>\n  <br>\n  <div class=\"scroll-container\" #scrollContainer tabindex=\"0\" [style.height.px]=\"windowHeight\" [style.padding.px]=\"sizebox * 6\">\n  <div tabindex=\"0\" class=\"grid-container\" [style.width.px]=\"sizebox * rows +20\" [style.height.px]=\" sizebox *cols +20\">\n    <div *ngFor=\"let row of matrix; let i = index\">\n      <div *ngFor=\"let cell of row; let j = index\"\n           [style.left]=\"j * sizebox + 'px'\" \n           [style.top]=\"i * sizebox + 'px'\"\n           [style.background-color]=\"isActiveCell(i, j) ? getPlayerColor(pla) : getPlayerColor(cell?.player)\"\n           [style.border]=\"isActiveCell(i, j) ? '2px solid yellow' : ''\"\n           [style.width.px]=\"sizebox -1\"\n           [style.height.px]=\"sizebox -1\"\n           class=\"cell\">\n        {{i}},{{j}}\n      </div>\n    </div>\n  </div>\n  </div>\n  </div>\n  "]},"metadata":{},"sourceType":"module"}