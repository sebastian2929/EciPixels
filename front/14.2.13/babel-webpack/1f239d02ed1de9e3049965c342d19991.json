{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix - copia/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"scrollContainer\"];\n\nfunction MatrixComponent_div_15_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r5 = ctx.$implicit;\n    const j_r6 = ctx.index;\n    const i_r3 = i0.ɵɵnextContext().index;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"left\", j_r6 * ctx_r4.sizebox + \"px\")(\"top\", i_r3 * ctx_r4.sizebox + \"px\")(\"background-color\", ctx_r4.isActiveCell(i_r3, j_r6) ? ctx_r4.getCellColor(ctx_r4.pla) : ctx_r4.getCellColor(cell_r5 == null ? null : cell_r5.player))(\"border\", ctx_r4.isActiveCell(i_r3, j_r6) ? \"2px solid yellow\" : \"\")(\"width\", ctx_r4.sizebox - 1, \"px\")(\"height\", ctx_r4.sizebox - 1, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", \"\", \" \");\n  }\n}\n\nfunction MatrixComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MatrixComponent_div_15_div_1_Template, 2, 13, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r2);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService;\n    this.rows = 80; // Fila para la celda a actualizar\n\n    this.cols = 80; // Columna para la celda a actualizar\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 3; // Jugador para la celda a actualizar\n\n    this.activeCell = null;\n    this.visitedCells = [];\n    this.isEnabled = true;\n    this.keyDownInterval = 40;\n    this.isKeyDown = false;\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n    this.sizebox = 21; // Tamaño de una celda + 1 (para el espacio entre celdas)\n\n    this.isActive = false;\n  }\n\n  ngOnInit() {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngAfterViewInit() {\n    //entrega las coordenadas de inicio del juego no importa el sitio\n    const {\n      row,\n      col\n    } = this.getInitialPosition(this.rows, this.cols);\n    this.setActiveCell(row, col);\n    this.setActiveCell(row, col + 1);\n    this.setActiveCell(row + 1, col);\n    this.setActiveCell(row + 1, col + 1);\n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  handleIncomingMessage(message) {\n    if (message.action === 'updateMatrix') {\n      this.matrix = message.data.matrix;\n    }\n\n    if (message.action === 'updateCell') {\n      const {\n        row,\n        column,\n        player\n      } = message.data;\n      this.matrix[row][column] = player;\n    }\n  }\n\n  getMatrixPlayer() {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row, column, player, value) {\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      player,\n      value\n    });\n  }\n\n  updateCellsByPlayer(player, value, row, column) {\n    this.websocketService.sendMessage('updateCellsByPlayer', {\n      player,\n      value,\n      row,\n      column\n    });\n  }\n\n  getCellColor(player) {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n\n      case '2':\n        return 'red';\n\n      case '3':\n        return 'green';\n\n      case '4':\n        return 'gray';\n\n      default:\n        return 'lightblue';\n    }\n  }\n\n  handleKeyDown(event) {\n    event.preventDefault();\n\n    if (this.isKeyDown) {\n      return;\n    }\n\n    if (this.isEnabled) {\n      let {\n        row,\n        col\n      } = this.activeCell || {\n        row: 0,\n        col: 0\n      };\n\n      switch (event.key) {\n        case 'ArrowUp':\n          row = Math.max(-1, row - 1);\n          break;\n\n        case 'ArrowDown':\n          row = Math.min(this.rows, row + 1);\n          break;\n\n        case 'ArrowLeft':\n          col = Math.max(-1, col - 1);\n          break;\n\n        case 'ArrowRight':\n          col = Math.min(this.cols, col + 1);\n          break;\n\n        default:\n          return;\n      }\n\n      if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n        this.isEnabled = false;\n        this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n      } else {\n        this.setActiveCell(row, col);\n      }\n    }\n\n    this.isKeyDown = true;\n    this.keyDownTimer = setTimeout(() => {\n      this.isKeyDown = false;\n    }, this.keyDownInterval);\n  }\n\n  handleKeyUp(event) {\n    this.isKeyDown = false; // Establecer la variable a false cuando se libera la tecla\n\n    if (!this.scrollContainer || !this.scrollContainer.nativeElement) {\n      return;\n    }\n\n    clearTimeout(this.keyDownTimer); // Limpiar el temporizador\n  }\n\n  setActiveCell(row, col) {\n    this.updateCell(row, col, this.pla, 0);\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = (this.sizebox * (this.rows + 16) - this.windowHeight) / this.rows * row;\n    scrollContainerEl.scrollLeft = (this.sizebox * (this.cols + 16) - this.windowWidth) / this.cols * col;\n    this.activeCell = {\n      row,\n      col\n    };\n    const visitedCell = this.visitedCells.find(cell => cell.row === row && cell.col === col);\n\n    if (visitedCell) {\n      console.log('La celda ya ha sido visitada');\n    } else {\n      console.log('La celda no ha sido visitada');\n      this.visitedCells.push({\n        row,\n        col\n      }); // Agregar la celda al arreglo\n    }\n\n    this.toggleActive();\n  }\n\n  isActiveCell(row, col) {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  toggleActive() {\n    this.isActive = !this.isActive;\n  }\n\n  updateWindowSize() {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n  getInitialPosition(rows, cols) {\n    const row = Math.floor(Math.random() * rows); // Generar un número aleatorio entre 0 y (rows - 1)\n\n    const col = Math.floor(Math.random() * cols); // Generar un número aleatorio entre 0 y (rows - 1)\n\n    return {\n      row,\n      col\n    };\n  }\n\n  getCellPlayer(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellPlayer = yield _this.websocketService.sendMessage('getCellPlayer', {\n          row,\n          column\n        });\n        return cellPlayer;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error);\n        return null;\n      }\n    })();\n  }\n\n  createMatrix(row, column) {\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  }\n\n  dropMatrix(row, column) {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  viewQuery: function MatrixComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n    }\n  },\n  decls: 16,\n  vars: 10,\n  consts: [[1, \"container\"], [1, \"update-cell-form\"], [\"type\", \"text\", \"placeholder\", \"Jugador\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [1, \"update-button\", 3, \"click\"], [\"tabindex\", \"0\", 1, \"scroll-container\"], [\"scrollContainer\", \"\"], [\"tabindex\", \"0\", 1, \"grid-container\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"cell\", 3, \"left\", \"top\", \"background-color\", \"border\", \"width\", \"height\", 4, \"ngFor\", \"ngForOf\"], [1, \"cell\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"label\");\n      i0.ɵɵtext(3, \"Jugador:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_4_listener($event) {\n        return ctx.pla = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_5_listener() {\n        return ctx.createMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(6, \"Crear matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_7_listener() {\n        return ctx.dropMatrix(ctx.rows, ctx.cols);\n      });\n      i0.ɵɵtext(8, \"Borrar matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_9_listener() {\n        return ctx.getMatrixPlayer();\n      });\n      i0.ɵɵtext(10, \"Cargar matrix\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(11, \"br\");\n      i0.ɵɵelementStart(12, \"div\", 4, 5)(14, \"div\", 6);\n      i0.ɵɵtemplate(15, MatrixComponent_div_15_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.pla);\n      i0.ɵɵadvance(8);\n      i0.ɵɵstyleProp(\"height\", ctx.windowHeight, \"px\")(\"padding\", ctx.sizebox * 6, \"px\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"width\", ctx.sizebox * ctx.rows + 20, \"px\")(\"height\", ctx.sizebox * ctx.cols + 20, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\".html[_ngcontent-%COMP%]   .body[_ngcontent-%COMP%]{\\r\\n  overflow: hidden;\\r\\n}\\r\\n\\r\\n.scroll-container[_ngcontent-%COMP%] {\\r\\n  width: 100%; \\r\\n  overflow: auto; \\r\\n  box-sizing: border-box; \\r\\n}\\r\\n\\r\\n.grid-container[_ngcontent-%COMP%] {\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.cell[_ngcontent-%COMP%] {\\r\\n  border: 1px solid rgb(37, 37, 37);\\r\\n  display: inline-block;\\r\\n  text-align: center;\\r\\n  vertical-align: middle;\\r\\n  position: absolute;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.cell.active[_ngcontent-%COMP%] {\\r\\n  border: 2px solid rgb(248, 248, 246);\\r\\n  z-index: 2; \\r\\n  animation: blink 1s infinite alternate; \\r\\n}\\r\\n\\r\\n@keyframes blink {\\r\\n  from { opacity: 1; } \\r\\n  to { opacity: 0; } \\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsV0FBVyxFQUFFLDJCQUEyQjtFQUN4QyxjQUFjLEVBQUUsK0JBQStCO0VBQy9DLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLGlDQUFpQztFQUNqQyxxQkFBcUI7RUFDckIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtFQUN0QixrQkFBa0I7RUFDbEIsVUFBVTtBQUNaOztBQUVBO0VBQ0Usb0NBQW9DO0VBQ3BDLFVBQVU7RUFDVixzQ0FBc0MsRUFBRSwwQkFBMEI7QUFDcEU7O0FBRUE7RUFDRSxPQUFPLFVBQVUsRUFBRSxFQUFFLHNCQUFzQjtFQUMzQyxLQUFLLFVBQVUsRUFBRSxFQUFFLG9CQUFvQjtBQUN6QyIsImZpbGUiOiJtYXRyaXguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5odG1sIC5ib2R5e1xyXG4gIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi5zY3JvbGwtY29udGFpbmVyIHtcclxuICB3aWR0aDogMTAwJTsgLyogbyBlbCB0YW1hw7FvIHF1ZSBkZXNlZXMgKi9cclxuICBvdmVyZmxvdzogYXV0bzsgLyogSGFiaWxpdGEgZWwgZGVzcGxhemFtaWVudG8gKi9cclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94OyBcclxufVxyXG5cclxuLmdyaWQtY29udGFpbmVyIHtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5jZWxsIHtcclxuICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMzcsIDM3LCAzNyk7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB6LWluZGV4OiAxO1xyXG59XHJcblxyXG4uY2VsbC5hY3RpdmUge1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYigyNDgsIDI0OCwgMjQ2KTtcclxuICB6LWluZGV4OiAyOyBcclxuICBhbmltYXRpb246IGJsaW5rIDFzIGluZmluaXRlIGFsdGVybmF0ZTsgLyogQW5pbWFjacOzbiBkZSBwYXJwYWRlbyAqL1xyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGJsaW5rIHtcclxuICBmcm9tIHsgb3BhY2l0eTogMTsgfSAvKiBPcGFjaWRhZCBjb21wbGV0YSAqL1xyXG4gIHRvIHsgb3BhY2l0eTogMDsgfSAvKiBPcGFjaWRhZCBtw61uaW1hICovXHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"mappings":"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","names":["ElementRef","i0","i_r3","ctx_r4","MatrixComponent","constructor","websocketService","window","innerWidth","innerHeight","ngOnInit","addEventListener","handleKeyDown","bind","updateWindowSize","setupWebSocket","getMatrixPlayer","ngAfterViewInit","row","col","getInitialPosition","rows","cols","setActiveCell","ngOnDestroy","removeEventListener","socket","getMessage","subscribe","message","handleIncomingMessage","action","matrix","data","column","player","sendMessage","updateCell","value","updateCellsByPlayer","getCellColor","event","preventDefault","isKeyDown","isEnabled","activeCell","key","Math","max","min","pla","keyDownTimer","setTimeout","keyDownInterval","handleKeyUp","scrollContainer","nativeElement","clearTimeout","scrollContainerEl","scrollTop","sizebox","windowHeight","scrollLeft","windowWidth","visitedCell","visitedCells","find","cell","console","log","push","toggleActive","isActiveCell","isActive","floor","random","getCellPlayer","cellPlayer","error","createMatrix","dropMatrix","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts","C:\\kmi\\Dropbox\\pro\\matrix - copia\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\nimport { ViewChild, ElementRef } from '@angular/core';\n\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\n\nexport class MatrixComponent implements OnInit {\n  @ViewChild('scrollContainer') scrollContainer!: ElementRef;\n\n\n\n  rows: number = 80; // Fila para la celda a actualizar\n  cols: number = 80; // Columna para la celda a actualizar\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 3; // Jugador para la celda a actualizar\n\n  activeCell: { row: number, col: number } | null = null;\n  visitedCells: { row: number, col: number }[] = [];\n  isEnabled: boolean = true;\n  keyDownTimer: any;\n  keyDownInterval: number = 40;\n  isKeyDown: boolean = false;\n  windowWidth: number = window.innerWidth;\n  windowHeight: number = window.innerHeight - 56;\n  sizebox = 21; // Tamaño de una celda + 1 (para el espacio entre celdas)\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    window.addEventListener('keydown', this.handleKeyDown.bind(this));\n    window.addEventListener('resize', this.updateWindowSize.bind(this));\n    this.setupWebSocket();\n    this.getMatrixPlayer();\n  }\n\n  ngAfterViewInit(): void {\n    //entrega las coordenadas de inicio del juego no importa el sitio\n    const { row, col } = this.getInitialPosition(this.rows, this.cols)\n    this.setActiveCell(row, col)\n    this.setActiveCell(row, col + 1)\n    this.setActiveCell(row + 1, col)\n    this.setActiveCell(row + 1, col + 1)\n  }\n\n  ngOnDestroy() {\n    // Eliminar listeners al destruir el componente para evitar fugas de memoria\n    window.removeEventListener('keydown', this.handleKeyDown.bind(this));\n    window.removeEventListener('resize', this.updateWindowSize.bind(this));\n  }\n\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  private handleIncomingMessage(message: any): void {\n    if (message.action === 'updateMatrix') {\n      this.matrix = (message.data.matrix);\n    }\n    if (message.action === 'updateCell') {\n      const { row, column, player } = message.data;\n      this.matrix[row][column] = player;\n    }\n  }\n\n\n  getMatrixPlayer(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  updateCell(row: number, column: number, player: number, value: number): void {\n    this.websocketService.sendMessage('updCell', { row, column, player, value });\n  }\n\n  updateCellsByPlayer(player: number, value: number | null, row: number, column: number) {\n    this.websocketService.sendMessage('updateCellsByPlayer', { player, value, row, column });\n  }\n\n  getCellColor(player: number | null): any {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n      case '2':\n        return 'red';\n      case '3':\n        return 'green';\n      case '4':\n        return 'gray';\n      default:\n        return 'lightblue';\n    }\n  }\n\n\n  handleKeyDown(event: KeyboardEvent): void {\n    event.preventDefault();\n\n    if (this.isKeyDown) {\n      return;\n    }\n\n\n    if (this.isEnabled) {\n      let { row, col } = this.activeCell || { row: 0, col: 0 };\n      switch (event.key) {\n        case 'ArrowUp':\n          row = Math.max(-1, row - 1);\n          break;\n        case 'ArrowDown':\n          row = Math.min(this.rows, row + 1);\n          break;\n        case 'ArrowLeft':\n          col = Math.max(-1, col - 1);\n          break;\n        case 'ArrowRight':\n          col = Math.min(this.cols, col + 1);\n          break;\n        default:\n          return;\n      }\n      if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n        this.isEnabled = false;\n        this.updateCellsByPlayer(this.pla, null, this.rows, this.cols);\n      } else {\n        this.setActiveCell(row, col);\n      }\n    }\n    this.isKeyDown = true;\n    this.keyDownTimer = setTimeout(() => {\n      this.isKeyDown = false;\n    }, this.keyDownInterval);\n\n  }\n\n\n  handleKeyUp(event: KeyboardEvent) {\n    this.isKeyDown = false; // Establecer la variable a false cuando se libera la tecla\n    if (!this.scrollContainer || !this.scrollContainer.nativeElement) {\n      return;\n    }\n    clearTimeout(this.keyDownTimer); // Limpiar el temporizador\n  }\n\n\n  setActiveCell(row: number, col: number): void {\n    this.updateCell(row, col, this.pla, 0);\n    const scrollContainerEl = this.scrollContainer.nativeElement;\n    scrollContainerEl.scrollTop = ((this.sizebox) * (this.rows + 16) - this.windowHeight) / this.rows * (row);\n    scrollContainerEl.scrollLeft = ((this.sizebox) * (this.cols + 16) - this.windowWidth) / this.cols * (col);\n    this.activeCell = { row, col };\n    const visitedCell = this.visitedCells.find(cell => cell.row === row && cell.col === col);\n    if (visitedCell) {\n      console.log('La celda ya ha sido visitada');\n    } else {\n      console.log('La celda no ha sido visitada');\n      this.visitedCells.push({ row, col }); // Agregar la celda al arreglo\n    }\n    this.toggleActive()\n  }\n\n  isActiveCell(row: number, col: number): boolean {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n  isActive: boolean = false;\n  toggleActive(): void {\n    this.isActive = !this.isActive;\n  }\n\n  updateWindowSize(): void {\n    this.windowWidth = window.innerWidth;\n    this.windowHeight = window.innerHeight - 56;\n  }\n\n  public getInitialPosition(rows: number, cols: number): { row: number, col: number } {\n    const row = Math.floor(Math.random() * rows); // Generar un número aleatorio entre 0 y (rows - 1)\n    const col = Math.floor(Math.random() * cols); // Generar un número aleatorio entre 0 y (rows - 1)\n    return { row, col }\n  }\n\n  async getCellPlayer(row: number, column: number): Promise<any> {\n    try {\n      const cellPlayer = await this.websocketService.sendMessage('getCellPlayer', { row, column });\n      return cellPlayer;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      return null;\n    }\n  }\n\n  createMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  dropMatrix(row: number, column: number): void {\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n}\n","\n<div class=\"container\">\n  \n  <div class=\"update-cell-form\">\n    <label>Jugador:</label>\n    <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n    <button class=\"update-button\" (click)=\"createMatrix(rows, cols)\">Crear matrix</button>\n    <button class=\"update-button\" (click)=\"dropMatrix(rows, cols)\">Borrar matrix</button>\n    <button class=\"update-button\" (click)=\"getMatrixPlayer()\">Cargar matrix</button>\n  </div>\n  <br>\n  <div class=\"scroll-container\" #scrollContainer tabindex=\"0\" [style.height.px]=\"windowHeight\" [style.padding.px]=\"sizebox * 6\">\n  <div tabindex=\"0\" class=\"grid-container\" [style.width.px]=\"sizebox * rows +20\" [style.height.px]=\" sizebox *cols +20\">\n    <div *ngFor=\"let row of matrix; let i = index\">\n      <div *ngFor=\"let cell of row; let j = index\"\n           [style.left]=\"j * sizebox + 'px'\" \n           [style.top]=\"i * sizebox + 'px'\"\n           [style.background-color]=\"isActiveCell(i, j) ? getCellColor(pla) : getCellColor(cell?.player)\"\n           [style.border]=\"isActiveCell(i, j) ? '2px solid yellow' : ''\"\n           [style.width.px]=\"sizebox -1\"\n           [style.height.px]=\"sizebox -1\"\n           class=\"cell\">\n        {{''}}\n      </div>\n    </div>\n  </div>\n  </div>\n  </div>\n  "]},"metadata":{},"sourceType":"module"}