{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction MatrixComponent_tr_23_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 9);\n    i0.ɵɵlistener(\"click\", function MatrixComponent_tr_23_td_1_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const j_r5 = restoredCtx.index;\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.setActiveCell(i_r2, j_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    const i_r2 = i0.ɵɵnextContext().index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r3.isActiveCell(i_r2, j_r5) ? ctx_r3.getCellColor(ctx_r3.pla) : ctx_r3.getCellColor(cell_r4 == null ? null : cell_r4.value))(\"border\", ctx_r3.isActiveCell(i_r2, j_r5) ? \"2px solid yellow\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cell_r4 == null ? null : cell_r4.value, \" \");\n  }\n}\n\nfunction MatrixComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MatrixComponent_tr_23_td_1_Template, 2, 5, \"td\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService; // Declarar propiedades y métodos según sea necesario\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 1; // Jugador para la celda a actualizar\n    // Variables para almacenar la posición activa\n\n    this.activeCell = null;\n    this.visitedCells = [];\n  }\n\n  ngOnInit() {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket(); // Solicitar la matriz al servidor al iniciar el componente\n\n    this.getMatrixValue();\n  } // Método para configurar la conexión WebSocket\n\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  } // Método para manejar los mensajes entrantes del servidor\n\n\n  handleIncomingMessage(message) {\n    ////console.log('Mensaje del servidor:', message);\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      ////console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    } // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n\n\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {\n        row,\n        column,\n        value\n      } = message.data; ////console.log('handle component updateCell row' + row);\n    } // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n\n  } // Método para solicitar la matriz al servidor\n\n\n  getMatrixValue() {\n    this.websocketService.sendMessage('getMatrix', {});\n  } // Método asincrónico para obtener el valor de una celda desde el servidor\n\n\n  getCellValue(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellValue = yield _this.websocketService.sendMessage('getCellValue', {\n          row,\n          column\n        }); //console.log('Valor de la celda:', cellValue);\n\n        return cellValue;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error); // Aquí puedes manejar el error como desees\n\n        return null;\n      }\n    })();\n  } // Método para actualizar una celda en la matriz\n\n\n  updateCell(row, column, value, gamer) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      value,\n      gamer\n    }); // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    //this.getMatrixValue();\n  } // Método para actualizar VARIAS celda en la matrix cuando un juagador gana o pierde\n\n\n  updateCellsByPlayer(value, gamer) {\n    this.websocketService.sendMessage('updateCellsByPlayer', {\n      value,\n      gamer\n    });\n  } // Método para crear una nueva matriz en el servidor\n\n\n  createMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  } // Método para borrar la matriz en el servidor\n\n\n  dropMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('dropMatrix', {\n      row: 0,\n      column: 0\n    });\n  } // Otros métodos y funciones según sea necesario\n  // cambia el color de acuerdocon el jugador que esté jugando\n\n\n  getCellColor(value) {\n    ////console.log(' getCelllCOlor                   ' + value)\n    switch (value + '') {\n      case '1':\n        return 'blue';\n\n      case '2':\n        return 'red';\n\n      case '3':\n        return 'green';\n\n      case '4':\n        return 'gray';\n\n      default:\n        return 'lightblue';\n    }\n  }\n\n  handleKeyDown(event) {\n    let {\n      row,\n      col\n    } = this.activeCell || {\n      row: 0,\n      col: 0\n    };\n\n    if (row > this.matrix.length || col > this.matrix.length) {\n      console.log('JODIDOSDDDDDD');\n    } else {\n      switch (event.key) {\n        case 'ArrowUp':\n          row = row - 1;\n          break;\n\n        case 'ArrowDown':\n          row = row + 1;\n          break;\n\n        case 'ArrowLeft':\n          col = col - 1;\n          break;\n\n        case 'ArrowRight':\n          col = col + 1;\n          break;\n\n        default:\n          return;\n      }\n    }\n\n    this.setActiveCell(row, col);\n  }\n\n  setActiveCell(row, col) {\n    this.activeCell = {\n      row,\n      col\n    };\n    this.visitedCells.push({\n      row,\n      col\n    });\n    this.updateCell(row, col, this.pla, 0);\n  }\n\n  isActiveCell(row, col) {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[1, \"update-cell-form\"], [\"type\", \"number\", \"placeholder\", \"Fila\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"placeholder\", \"Columna\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Nuevo valor\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Jugador\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [1, \"update-button\", 3, \"click\"], [\"tabindex\", \"0\", 3, \"keydown\"], [4, \"ngFor\", \"ngForOf\"], [3, \"background-color\", \"border\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\");\n      i0.ɵɵtext(2, \"Fila:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.row = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\");\n      i0.ɵɵtext(5, \"Columna:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.col = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"label\");\n      i0.ɵɵtext(8, \"Nuevo valor:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.val = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵtext(11, \"Jugador:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.pla = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_13_listener() {\n        return ctx.updateCell(ctx.row, ctx.col, ctx.val, ctx.pla);\n      });\n      i0.ɵɵtext(14, \"Actualizar Celda\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_15_listener() {\n        return ctx.getCellValue(ctx.row, ctx.col);\n      });\n      i0.ɵɵtext(16, \"Obtener valor\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_17_listener() {\n        return ctx.createMatrix(10, 10);\n      });\n      i0.ɵɵtext(18, \"Crear matrix\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_19_listener() {\n        return ctx.dropMatrix(10, 10);\n      });\n      i0.ɵɵtext(20, \"Borrar matrix\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"table\", 6);\n      i0.ɵɵlistener(\"keydown\", function MatrixComponent_Template_table_keydown_22_listener($event) {\n        return ctx.handleKeyDown($event);\n      });\n      i0.ɵɵtemplate(23, MatrixComponent_tr_23_Template, 2, 1, \"tr\", 7);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.row);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.col);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.val);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.pla);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\".input-field[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 10px;\\r\\n    padding: 8px;\\r\\n    border: 1px solid #ccc;\\r\\n    border-radius: 4px;\\r\\n  }\\r\\n  \\r\\n  label[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%] {\\r\\n    padding: 10px 20px;\\r\\n    background-color: #007bff;\\r\\n    color: #fff;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #0056b3;\\r\\n  }\\r\\n  \\r\\n  table[_ngcontent-%COMP%] {\\r\\n    border-collapse: collapse;\\r\\n  }\\r\\n  \\r\\n  td[_ngcontent-%COMP%] {\\r\\n    width: 40px;  \\r\\n    height: 40px; \\r\\n    text-align: center;\\r\\n    vertical-align: middle;\\r\\n    border: 1px solid black;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJFQUFFO0lBQ0UsbUJBQW1CO0lBQ25CLFlBQVk7SUFDWixzQkFBc0I7SUFDdEIsa0JBQWtCO0VBQ3BCOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQix5QkFBeUI7SUFDekIsV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsZUFBZTtFQUNqQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLHlCQUF5QjtFQUMzQjs7RUFFQTtJQUNFLFdBQVcsR0FBRyx1QkFBdUI7SUFDckMsWUFBWSxFQUFFLHVCQUF1QjtJQUNyQyxrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLHVCQUF1QjtFQUN6QiIsImZpbGUiOiJtYXRyaXguY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiAgLmlucHV0LWZpZWxkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIH1cclxuICBcclxuICBsYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICB9XHJcbiAgXHJcbiAgLnVwZGF0ZS1idXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICBcclxuICAudXBkYXRlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzO1xyXG4gIH1cclxuICBcclxuICB0YWJsZSB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIH1cclxuICBcclxuICB0ZCB7XHJcbiAgICB3aWR0aDogNDBweDsgIC8qIFRhbWHDsW8gZGUgbGEgY2VsZGEgKi9cclxuICAgIGhlaWdodDogNDBweDsgLyogVGFtYcOxbyBkZSBsYSBjZWxkYSAqL1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIH1cclxuICAiXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r3","MatrixComponent","constructor","websocketService","ngOnInit","setupWebSocket","getMatrixValue","socket","getMessage","subscribe","message","handleIncomingMessage","action","matrix","data","row","column","value","sendMessage","getCellValue","cellValue","error","console","updateCell","gamer","updateCellsByPlayer","createMatrix","dropMatrix","getCellColor","handleKeyDown","event","col","activeCell","length","log","key","setActiveCell","visitedCells","push","pla","isActiveCell","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html","C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts"],"sourcesContent":["<div class=\"update-cell-form\">\n  <label>Fila:</label>\n  <input class=\"input-field\" type=\"number\" placeholder=\"Fila\" [(ngModel)]=\"row\">\n  <label>Columna:</label>\n  <input class=\"input-field\" type=\"number\" placeholder=\"Columna\" [(ngModel)]=\"col\">\n  <label>Nuevo valor:</label>\n  <input class=\"input-field\" type=\"text\" placeholder=\"Nuevo valor\" [(ngModel)]=\"val\">\n  <label>Jugador:</label>\n  <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n  <button class=\"update-button\" (click)=\"updateCell(row, col, val, pla)\">Actualizar Celda</button>\n  <button class=\"update-button\" (click)=\"getCellValue(row, col)\">Obtener valor</button>\n  <button class=\"update-button\" (click)=\"createMatrix(10, 10)\">Crear matrix</button>\n  <button class=\"update-button\" (click)=\"dropMatrix(10, 10)\">Borrar matrix</button>\n</div>\n<br>\n\n<table (keydown)=\"handleKeyDown($event)\" tabindex=\"0\">\n  <tr *ngFor=\"let row of matrix; let i = index\">\n    <td *ngFor=\"let cell of row; let j = index\"\n        [style.background-color]=\"isActiveCell(i, j) ? getCellColor(pla) : getCellColor(cell?.value)\"\n        [style.border]=\"isActiveCell(i, j) ? '2px solid yellow' : ''\"\n        (click)=\"setActiveCell(i, j)\">\n      {{ cell?.value }}\n    </td>\n  </tr>\n</table>\n\n","import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\nexport class MatrixComponent implements OnInit {\n  // Declarar propiedades y métodos según sea necesario\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 1 // Jugador para la celda a actualizar\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket();\n    // Solicitar la matriz al servidor al iniciar el componente\n    this.getMatrixValue();\n  }\n\n  // Método para configurar la conexión WebSocket\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  // Método para manejar los mensajes entrantes del servidor\n  private handleIncomingMessage(message: any): void {\n    ////console.log('Mensaje del servidor:', message);\n\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      ////console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    }\n\n    // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const { row, column, value } = message.data;\n      ////console.log('handle component updateCell row' + row);\n    }\n\n    // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n  }\n\n\n  // Método para solicitar la matriz al servidor\n  getMatrixValue(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  // Método asincrónico para obtener el valor de una celda desde el servidor\n  async getCellValue(row: number, column: number): Promise<any> {\n    try {\n      const cellValue = await this.websocketService.sendMessage('getCellValue', { row, column });\n      //console.log('Valor de la celda:', cellValue);\n      return cellValue;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      // Aquí puedes manejar el error como desees\n      return null;\n    }\n  }\n\n  // Método para actualizar una celda en la matriz\n  updateCell(row: number, column: number, value: number, gamer: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', { row, column, value, gamer });\n    // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    //this.getMatrixValue();\n  }\n\n  // Método para actualizar VARIAS celda en la matrix cuando un juagador gana o pierde\n  updateCellsByPlayer(value: number | null, gamer: number) {\n    this.websocketService.sendMessage('updateCellsByPlayer', { value, gamer });\n  }\n\n  // Método para crear una nueva matriz en el servidor\n  createMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  // Método para borrar la matriz en el servidor\n  dropMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('dropMatrix', { row: 0, column: 0 });\n  }\n\n\n\n\n\n  // Otros métodos y funciones según sea necesario\n\n  // cambia el color de acuerdocon el jugador que esté jugando\n  getCellColor(value: number | null): any {\n    ////console.log(' getCelllCOlor                   ' + value)\n    switch (value + '') {\n      case '1':\n        return 'blue';\n      case '2':\n        return 'red';\n      case '3':\n        return 'green';\n      case '4':\n        return 'gray';\n      default:\n        return 'lightblue';\n    }\n  }\n\n\n  // Variables para almacenar la posición activa\n  activeCell: { row: number, col: number } | null = null;\n  visitedCells: { row: number, col: number }[] = [];\n\n  handleKeyDown(event: KeyboardEvent): void {\n    let { row, col } = this.activeCell || { row: 0, col: 0 };\n    if (row > this.matrix.length || col > this.matrix.length) {\n      console.log('JODIDOSDDDDDD')\n    } else {\n      switch (event.key) {\n        case 'ArrowUp':\n          row = row - 1;\n          break;\n        case 'ArrowDown':\n          row = row + 1;\n          break;\n        case 'ArrowLeft':\n          col = col - 1;\n          break;\n        case 'ArrowRight':\n          col = col + 1;\n          break;\n        default:\n          return;\n      }\n    }\n    this.setActiveCell(row, col);\n  }\n\n\n  setActiveCell(row: number, col: number): void {\n    this.activeCell = { row, col };\n    this.visitedCells.push({ row, col });\n    this.updateCell(row, col, this.pla, 0);\n  }\n\n  isActiveCell(row: number, col: number): boolean {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}