{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction MatrixComponent_tr_23_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(cell_r3);\n  }\n}\n\nfunction MatrixComponent_tr_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MatrixComponent_tr_23_td_1_Template, 2, 1, \"td\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService; // Declarar propiedades y métodos según sea necesario\n\n    this.matrix = [];\n    this.row = 0;\n    this.col = 0;\n    this.val = 0;\n    this.pla = 0;\n  }\n\n  ngOnInit() {\n    this.setupWebSocket();\n  }\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  handleIncomingMessage(message) {\n    // Aquí puedes manejar los mensajes entrantes del servidor\n    console.log('Mensaje del servidor:', message); // Por ejemplo, puedes actualizar la matriz si recibes un mensaje que contiene una nueva matriz\n\n    if (message.action === 'updateMatrix') {\n      this.updateMatrix(message.data);\n    } // También puedes manejar otros tipos de mensajes según las necesidades de tu aplicación\n\n  }\n\n  updateMatrix(newMatrix) {\n    // Actualizar la matriz con la nueva matriz recibida del servidor\n    // Por ejemplo:\n    this.matrix = newMatrix;\n  }\n\n  getCell(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        // Llamar al servicio de WebSocket para obtener el valor de la celda\n        const cellValue = yield _this.websocketService.sendMessage('getCell', {\n          row,\n          column\n        });\n        console.log('Valor de la celda:', cellValue);\n        return cellValue;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error); // Aquí puedes manejar el error como desees\n\n        return null;\n      }\n    })();\n  } // Función para actualizar una celda en la matriz\n\n\n  updateCell(row, column, value, gamer) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      value,\n      gamer\n    });\n  } // Otros métodos y funciones según sea necesario\n  // Función para actualizar una celda en la matriz\n\n\n  createMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[1, \"update-cell-form\"], [\"type\", \"number\", \"placeholder\", \"Fila\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"placeholder\", \"Columna\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Nuevo valor\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"Jugador\", 1, \"input-field\", 3, \"ngModel\", \"ngModelChange\"], [1, \"update-button\", 3, \"click\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\");\n      i0.ɵɵtext(2, \"Fila:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_3_listener($event) {\n        return ctx.row = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"label\");\n      i0.ɵɵtext(5, \"Columna:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_6_listener($event) {\n        return ctx.col = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"label\");\n      i0.ɵɵtext(8, \"Nuevo valor:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.val = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"label\");\n      i0.ɵɵtext(11, \"Jugador:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function MatrixComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.pla = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_13_listener() {\n        return ctx.updateCell(ctx.row, ctx.col, ctx.val, ctx.pla);\n      });\n      i0.ɵɵtext(14, \"Actualizar Celda\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"br\");\n      i0.ɵɵelementStart(16, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_16_listener() {\n        return ctx.getCell(ctx.row, ctx.col);\n      });\n      i0.ɵɵtext(17, \"Obtener valor\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"br\");\n      i0.ɵɵelementStart(19, \"button\", 5);\n      i0.ɵɵlistener(\"click\", function MatrixComponent_Template_button_click_19_listener() {\n        return ctx.createMatrix(10, 10);\n      });\n      i0.ɵɵtext(20, \"Crear matrix\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"table\");\n      i0.ɵɵtemplate(23, MatrixComponent_tr_23_Template, 2, 1, \"tr\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.row);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.col);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.val);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.pla);\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\".update-cell-form[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .input-field[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 10px;\\r\\n    padding: 8px;\\r\\n    border: 1px solid #ccc;\\r\\n    border-radius: 4px;\\r\\n  }\\r\\n  \\r\\n  label[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%] {\\r\\n    padding: 10px 20px;\\r\\n    background-color: #007bff;\\r\\n    color: #fff;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #0056b3;\\r\\n  }\\r\\n  \\r\\n  .matrix-table[_ngcontent-%COMP%] {\\r\\n    border-collapse: collapse;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .matrix-cell[_ngcontent-%COMP%] {\\r\\n    border: 1px solid #ddd;\\r\\n    padding: 8px;\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  .matrix-cell[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #f2f2f2;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGVBQWU7RUFDakI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0I7O0VBR0E7SUFDRSx5QkFBeUI7SUFDekIsV0FBVztFQUNiOztFQUVBO0lBQ0Usc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0IiLCJmaWxlIjoibWF0cml4LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudXBkYXRlLWNlbGwtZm9ybSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbiAgXHJcbiAgLmlucHV0LWZpZWxkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIH1cclxuICBcclxuICBsYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICB9XHJcbiAgXHJcbiAgLnVwZGF0ZS1idXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICBcclxuICAudXBkYXRlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzO1xyXG4gIH1cclxuICBcclxuXHJcbiAgLm1hdHJpeC10YWJsZSB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gIFxyXG4gIC5tYXRyaXgtY2VsbCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICAubWF0cml4LWNlbGw6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxuICB9XHJcbiAgIl19 */\"]\n});","map":{"version":3,"mappings":";;;;;;;;IAqBMA;IAA6BA;IAAUA;;;;;IAAVA;IAAAA;;;;;;IAD/BA;IACEA;IACFA;;;;;IADuBA;IAAAA;;;;ACZ3B,OAAM,MAAOC,eAAP,CAAsB;EAQ1BC,YAAoBC,gBAApB,EAAsD;IAAlC,yCAAkC,CAPtD;;IACA,cAAkB,EAAlB;IACA,WAAc,CAAd;IACA,WAAc,CAAd;IACA,WAAc,CAAd;IACA,WAAc,CAAd;EAE2D;;EAE3DC,QAAQ;IACN,KAAKC,cAAL;EACD;;EAEOA,cAAc;IACpB,MAAMC,MAAM,GAAG,KAAKH,gBAAL,CAAsBI,UAAtB,EAAf;IACAD,MAAM,CAACE,SAAP,CAAkBC,OAAD,IAAY;MAC3B,KAAKC,qBAAL,CAA2BD,OAA3B;IACD,CAFD;EAGD;;EAEOC,qBAAqB,CAACD,OAAD,EAAa;IACxC;IACAE,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCH,OAArC,EAFwC,CAIxC;;IACA,IAAIA,OAAO,CAACI,MAAR,KAAmB,cAAvB,EAAuC;MACrC,KAAKC,YAAL,CAAkBL,OAAO,CAACM,IAA1B;IACD,CAPuC,CASxC;;EACD;;EAEOD,YAAY,CAACE,SAAD,EAAmB;IACrC;IACA;IACA,KAAKC,MAAL,GAAcD,SAAd;EACD;;EAGKE,OAAO,CAACC,GAAD,EAAcC,MAAd,EAA4B;IAAA;;IAAA;MACvC,IAAI;QACA;QACA,MAAMC,SAAS,SAAS,KAAI,CAAClB,gBAAL,CAAsBmB,WAAtB,CAAkC,SAAlC,EAA6C;UAACH,GAAD;UAAMC;QAAN,CAA7C,CAAxB;QACAT,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCS,SAAlC;QACA,OAAOA,SAAP;MACH,CALD,CAKE,OAAOE,KAAP,EAAc;QACZZ,OAAO,CAACY,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADY,CAEZ;;QACA,OAAO,IAAP;MACH;IAVsC;EAW1C,CAnD2B,CAqD1B;;;EACAC,UAAU,CAACL,GAAD,EAAcC,MAAd,EAA8BK,KAA9B,EAA6CC,KAA7C,EAA0D;IAClE;IACA,KAAKvB,gBAAL,CAAsBmB,WAAtB,CAAkC,SAAlC,EAA6C;MAAEH,GAAF;MAAOC,MAAP;MAAeK,KAAf;MAAsBC;IAAtB,CAA7C;EACD,CAzDyB,CA0D1B;EAEA;;;EACAC,YAAY,CAACR,GAAD,EAAcC,MAAd,EAA4B;IACtC;IACA,KAAKjB,gBAAL,CAAsBmB,WAAtB,CAAkC,cAAlC,EAAkD;MAAEH,GAAF;MAAOC;IAAP,CAAlD;EACD;;AAhEyB;;;mBAAfnB,iBAAeD;AAAA;;;QAAfC;EAAe2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT5BhC,+BAA8B,CAA9B,EAA8B,OAA9B;MAEWA;MAAKA;MACZA;MAA4DA;QAAA;MAAA;MAA5DA;MACAA;MAAOA;MAAQA;MACfA;MAA+DA;QAAA;MAAA;MAA/DA;MACAA;MAAOA;MAAYA;MACnBA;MAAiEA;QAAA;MAAA;MAAjEA;MACAA;MAAOA;MAAQA;MACfA;MAA6DA;QAAA;MAAA;MAA7DA;MAEAA;MAA8BA;QAAA,OAASiC,kDAAT;MAAuC,CAAvC;MAAyCjC;MAAgBA;MACvFA;MACAA;MAA8BA;QAAA,OAASiC,6BAAT;MAA0B,CAA1B;MAA4BjC;MAAaA;MACvEA;MACAA;MAA8BA;QAAA,OAASiC,iBAAa,EAAb,EAAiB,EAAjB,CAAT;MAA6B,CAA7B;MAA+BjC;MAAYA;MAG7EA;MACAA;MACIA;MAGFA;;;;MApB8DA;MAAAA;MAEGA;MAAAA;MAEEA;MAAAA;MAEJA;MAAAA;MAWzCA;MAAAA","names":["i0","MatrixComponent","constructor","websocketService","ngOnInit","setupWebSocket","socket","getMessage","subscribe","message","handleIncomingMessage","console","log","action","updateMatrix","data","newMatrix","matrix","getCell","row","column","cellValue","sendMessage","error","updateCell","value","gamer","createMatrix","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html","C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts"],"sourcesContent":["<div class=\"update-cell-form\">\n    <!-- Campos de entrada para cada parámetro -->\n    <label>Fila:</label>\n    <input class=\"input-field\" type=\"number\" placeholder=\"Fila\" [(ngModel)]=\"row\">\n    <label>Columna:</label>\n    <input class=\"input-field\" type=\"number\" placeholder=\"Columna\" [(ngModel)]=\"col\">\n    <label>Nuevo valor:</label>\n    <input class=\"input-field\" type=\"text\" placeholder=\"Nuevo valor\" [(ngModel)]=\"val\">\n    <label>Jugador:</label>\n    <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n    <!-- Botón para ejecutar la operación -->\n    <button class=\"update-button\" (click)=\"updateCell(row, col, val, pla)\">Actualizar Celda</button>\n    <br>\n    <button class=\"update-button\" (click)=\"getCell(row, col)\">Obtener valor</button>\n    <br>\n    <button class=\"update-button\" (click)=\"createMatrix(10, 10)\">Crear matrix</button>\n    \n</div>\n<br>\n<table>\n    <tr *ngFor=\"let row of matrix\">\n      <td *ngFor=\"let cell of row\">{{ cell }}</td>\n    </tr>\n  </table>\n  ","import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\n\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\nexport class MatrixComponent implements OnInit {\n  // Declarar propiedades y métodos según sea necesario\n  matrix: any[][] = [];\n  row: number = 0;\n  col: number = 0;\n  val: number = 0;\n  pla: number = 0;\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    this.setupWebSocket();\n  }\n\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  private handleIncomingMessage(message: any): void {\n    // Aquí puedes manejar los mensajes entrantes del servidor\n    console.log('Mensaje del servidor:', message);\n\n    // Por ejemplo, puedes actualizar la matriz si recibes un mensaje que contiene una nueva matriz\n    if (message.action === 'updateMatrix') {\n      this.updateMatrix(message.data);\n    }\n\n    // También puedes manejar otros tipos de mensajes según las necesidades de tu aplicación\n  }\n\n  private updateMatrix(newMatrix: any[][]): void {\n    // Actualizar la matriz con la nueva matriz recibida del servidor\n    // Por ejemplo:\n    this.matrix = newMatrix;\n  }\n\n\n  async getCell(row: number, column: number): Promise<any> {\n    try {\n        // Llamar al servicio de WebSocket para obtener el valor de la celda\n        const cellValue = await this.websocketService.sendMessage('getCell', {row, column});\n        console.log('Valor de la celda:', cellValue);\n        return cellValue;\n    } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error);\n        // Aquí puedes manejar el error como desees\n        return null;\n    }\n}\n\n  // Función para actualizar una celda en la matriz\n  updateCell(row: number, column: number, value: number, gamer: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', { row, column, value, gamer });\n  }\n  // Otros métodos y funciones según sea necesario\n\n  // Función para actualizar una celda en la matriz\n  createMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n  // Otros métodos y funciones según sea necesario\n\n}\n"]},"metadata":{},"sourceType":"module"}