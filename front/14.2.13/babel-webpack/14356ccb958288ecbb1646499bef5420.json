{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nconst _c0 = [\"lienzo\"];\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService; // Declarar propiedades y métodos según sea necesario\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 0; // Jugador para la celda a actualizar\n\n    this.vertical = 10;\n    this.horizontal = 10;\n    this.posicion = {\n      x: 0,\n      y: 0\n    };\n    this.cuadros = [];\n    this.index = 0;\n    this.direccion = {\n      x: 0,\n      y: 0\n    };\n    this.pausado = false;\n  }\n\n  ngOnInit() {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket(); // Solicitar la matriz al servidor al iniciar el componente\n\n    this.getMatrixValue();\n  } // Método para configurar la conexión WebSocket\n\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  } // Método para manejar los mensajes entrantes del servidor\n\n\n  handleIncomingMessage(message) {\n    console.log('Mensaje del servidor:', message); // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    } // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n\n\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {\n        row,\n        column,\n        value\n      } = message.data;\n      console.log('handle component updateCell row' + row);\n    } // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n\n  }\n\n  getCellColor(value) {\n    console.log(' getCelllCOlor                   ' + value);\n\n    switch (value + '') {\n      case '1':\n        return {\n          'background-color': 'blue'\n        };\n\n      case '2':\n        return {\n          'background-color': 'red'\n        };\n\n      case '3':\n        return {\n          'background-color': 'green'\n        };\n\n      case '4':\n        return {\n          'background-color': 'gray'\n        };\n\n      default:\n        return {\n          'background-color': 'lightblue'\n        };\n    }\n  } // Método para solicitar la matriz al servidor\n\n\n  getMatrixValue() {\n    this.websocketService.sendMessage('getMatrix', {});\n  } // Método asincrónico para obtener el valor de una celda desde el servidor\n\n\n  getCellValue(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellValue = yield _this.websocketService.sendMessage('getCellValue', {\n          row,\n          column\n        });\n        console.log('Valor de la celda:', cellValue);\n        return cellValue;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error); // Aquí puedes manejar el error como desees\n\n        return null;\n      }\n    })();\n  } // Método para actualizar una celda en la matriz\n\n\n  updateCell(row, column, value, gamer) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      value,\n      gamer\n    }); // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n\n    this.getMatrixValue();\n  } // Método para crear una nueva matriz en el servidor\n\n\n  createMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  } // Otros métodos y funciones según sea necesario\n\n\n  ngAfterViewInit() {\n    this.canvas = this.lienzo.nativeElement;\n    this.context = this.canvas.getContext('2d');\n    this.canvas.focus();\n    this.canvas = this.lienzo.nativeElement;\n    this.gw = 800 / this.horizontal;\n    this.gh = 800 / this.vertical;\n\n    for (let i = 0; i < this.vertical; i++) {\n      this.cuadros[i] = [];\n\n      for (let j = 0; j < this.horizontal; j++) {\n        this.cuadros[i][j] = {\n          color: \"white\",\n          index: this.index\n        };\n        this.index++;\n      }\n    } //this.canvas.addEventListener('keydown', (event) => this.onKeyDown(event));\n    //this.canvas.addEventListener('keyup', (event) => this.onKeyUp(event));\n\n\n    this.fillBackground();\n  }\n\n  handleKeyboardEvent(event) {\n    console.log(\"Tecla presionada:\", event.keyCode);\n\n    switch (event.keyCode) {\n      case 37:\n        // Left arrow\n        this.direccion.x = -1;\n        this.direccion.y = 0;\n        break;\n\n      case 38:\n        // Up arrow\n        this.direccion.x = 0;\n        this.direccion.y = -1;\n        break;\n\n      case 39:\n        // Right arrow\n        this.direccion.x = 1;\n        this.direccion.y = 0;\n        break;\n\n      case 40:\n        // Down arrow\n        this.direccion.x = 0;\n        this.direccion.y = 1;\n        break;\n\n      case 80:\n        // \"p\" key\n        this.pausado = !this.pausado;\n\n        if (this.pausado) {\n          clearInterval(this.intervalId);\n        } else {\n          this.intervalId = setInterval(() => {\n            this.updatePosition();\n          }, 100);\n        }\n\n        break;\n    }\n\n    if (!this.pausado && !this.intervalId) {\n      this.intervalId = setInterval(() => {\n        this.updatePosition();\n      }, 100);\n    }\n  }\n\n  handleKeyUp(event) {\n    console.log(\"Tecla liberada:\", event.keyCode);\n\n    switch (event.keyCode) {\n      case 37:\n      case 38:\n      case 39:\n      case 40:\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        break;\n    }\n  }\n\n  updatePosition() {\n    this.posicion.x += this.direccion.x;\n    this.posicion.y += this.direccion.y;\n    if (this.posicion.x < 0) this.posicion.x = 0;\n    if (this.posicion.y < 0) this.posicion.y = 0;\n    if (this.posicion.x >= this.horizontal) this.posicion.x = this.horizontal - 1;\n    if (this.posicion.y >= this.vertical) this.posicion.y = this.vertical - 1;\n    this.fillBackground();\n    this.drawSquare(this.posicion.x, this.posicion.y, \"blue\");\n    this.drawIndex(this.posicion.x, this.posicion.y);\n  }\n\n  drawSquare(x, y, color) {\n    const rx = x * this.gw;\n    const ry = y * this.gh;\n    this.context?.fillRect(rx, ry, this.gw, this.gh);\n    this.context?.strokeRect(rx, ry, this.gw, this.gh);\n  }\n\n  fillBackground() {\n    if (this.context) {\n      this.context.fillStyle = '#000';\n      this.context.fillRect(0, 0, 400, 400);\n\n      for (let i = 0; i < this.vertical; i++) {\n        for (let j = 0; j < this.horizontal; j++) {\n          const cuadro = this.cuadros[i][j];\n          this.context.fillStyle = cuadro.color;\n          const rx = j * this.gw;\n          const ry = i * this.gh;\n          this.context.fillRect(rx, ry, this.gw, this.gh);\n          this.context.strokeStyle = \"black\";\n          this.context.strokeRect(rx, ry, this.gw, this.gh);\n        }\n      }\n    }\n  }\n\n  drawIndex(x, y) {\n    this.context.fillStyle = \"black\";\n    this.context.font = \"12px Arial\";\n    this.context.fillText(\"Fila: \" + y, 5, 15 + y * this.gh);\n    this.context.fillText(\"Columna: \" + x, 5, 28 + x * this.gw);\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  viewQuery: function MatrixComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lienzo = _t.first);\n    }\n  },\n  hostBindings: function MatrixComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatrixComponent_keydown_HostBindingHandler($event) {\n        return ctx.handleKeyboardEvent($event);\n      }, false, i0.ɵɵresolveWindow)(\"keyup\", function MatrixComponent_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyUp($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 7,\n  vars: 0,\n  consts: [[2, \"margin\", \"0\"], [\"width\", \"400\", \"height\", \"400\"], [\"lienzo\", \"\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\")(1, \"head\")(2, \"title\");\n      i0.ɵɵtext(3, \"Mapa de Cuadros\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"body\", 0);\n      i0.ɵɵelement(5, \"canvas\", 1, 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\".update-cell-form[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n  }\\r\\n  \\r\\n  .input-field[_ngcontent-%COMP%] {\\r\\n    margin-bottom: 10px;\\r\\n    padding: 8px;\\r\\n    border: 1px solid #ccc;\\r\\n    border-radius: 4px;\\r\\n  }\\r\\n  \\r\\n  label[_ngcontent-%COMP%] {\\r\\n    font-weight: bold;\\r\\n    margin-bottom: 5px;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%] {\\r\\n    padding: 10px 20px;\\r\\n    background-color: #007bff;\\r\\n    color: #fff;\\r\\n    border: none;\\r\\n    border-radius: 4px;\\r\\n    cursor: pointer;\\r\\n  }\\r\\n  \\r\\n  .update-button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #0056b3;\\r\\n  }\\r\\n  \\r\\n  .matrix-table[_ngcontent-%COMP%] {\\r\\n    border-collapse: collapse;\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .matrix-cell[_ngcontent-%COMP%] {\\r\\n    border: 1px solid #ddd;\\r\\n    padding: 8px;\\r\\n    text-align: center;\\r\\n  }\\r\\n  \\r\\n  .matrix-cell[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #f2f2f2;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLG1CQUFtQjtJQUNuQixZQUFZO0lBQ1osc0JBQXNCO0lBQ3RCLGtCQUFrQjtFQUNwQjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxrQkFBa0I7SUFDbEIseUJBQXlCO0lBQ3pCLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGVBQWU7RUFDakI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0I7O0VBR0E7SUFDRSx5QkFBeUI7SUFDekIsV0FBVztFQUNiOztFQUVBO0lBQ0Usc0JBQXNCO0lBQ3RCLFlBQVk7SUFDWixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0IiLCJmaWxlIjoibWF0cml4LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIudXBkYXRlLWNlbGwtZm9ybSB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbiAgXHJcbiAgLmlucHV0LWZpZWxkIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICBwYWRkaW5nOiA4cHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gIH1cclxuICBcclxuICBsYWJlbCB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICB9XHJcbiAgXHJcbiAgLnVwZGF0ZS1idXR0b24ge1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIH1cclxuICBcclxuICAudXBkYXRlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzO1xyXG4gIH1cclxuICBcclxuXHJcbiAgLm1hdHJpeC10YWJsZSB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfVxyXG4gIFxyXG4gIC5tYXRyaXgtY2VsbCB7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIH1cclxuICBcclxuICAubWF0cml4LWNlbGw6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YyZjJmMjtcclxuICB9XHJcbiAgIl19 */\", \"canvas[_ngcontent-%COMP%] {\\n            border: 1px solid black;\\n        }\"]\n});","map":{"version":3,"mappings":";AAEA,SAASA,UAAT,QAAqD,eAArD;;;;AASA,OAAM,MAAOC,eAAP,CAAsB;EAsB1BC,YAAoBC,gBAApB,EAAsD;IAAlC,yCAAkC,CArBtD;;IACA,cAAkB,EAAlB,CAoBsD,CApBhC;;IACtB,WAAc,CAAd,CAmBsD,CAnBrC;;IACjB,WAAc,CAAd,CAkBsD,CAlBrC;;IACjB,WAAc,CAAd,CAiBsD,CAjBrC;;IACjB,WAAc,CAAd,CAgBsD,CAhBrC;;IAKT,gBAAW,EAAX;IACA,kBAAa,EAAb;IAGA,gBAAW;MAACC,CAAC,EAAE,CAAJ;MAAOC,CAAC,EAAE;IAAV,CAAX;IACA,eAAgD,EAAhD;IACA,aAAQ,CAAR;IACA,iBAAY;MAACD,CAAC,EAAE,CAAJ;MAAOC,CAAC,EAAE;IAAV,CAAZ;IAEA,eAAU,KAAV;EAEmD;;EAE3DC,QAAQ;IACN;IACA,KAAKC,cAAL,GAFM,CAGN;;IACA,KAAKC,cAAL;EACD,CA7ByB,CA+B1B;;;EACQD,cAAc;IACpB,MAAME,MAAM,GAAG,KAAKN,gBAAL,CAAsBO,UAAtB,EAAf;IACAD,MAAM,CAACE,SAAP,CAAkBC,OAAD,IAAY;MAC3B;MACA,KAAKC,qBAAL,CAA2BD,OAA3B;IACD,CAHD;EAID,CAtCyB,CAwC1B;;;EACQC,qBAAqB,CAACD,OAAD,EAAa;IACxCE,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCH,OAArC,EADwC,CAGxC;;IACA,IAAIA,OAAO,CAACI,MAAR,KAAmB,cAAvB,EAAuC;MACrC;MACAF,OAAO,CAACC,GAAR,CAAY,+BAAZ;MACA,KAAKE,MAAL,GAAcL,OAAO,CAACM,IAAR,CAAaD,MAA3B;IACD,CARuC,CAUxC;;;IACA,IAAIL,OAAO,CAACI,MAAR,KAAmB,YAAvB,EAAqC;MACnC;MACA,MAAM;QAACG,GAAD;QAAMC,MAAN;QAAcC;MAAd,IAAwBT,OAAO,CAACM,IAAtC;MACAJ,OAAO,CAACC,GAAR,CAAY,oCAAoCI,GAAhD;IACD,CAfuC,CAiBxC;;EACD;;EAEDG,YAAY,CAACD,KAAD,EAAqB;IAC/BP,OAAO,CAACC,GAAR,CAAY,sCAAsCM,KAAlD;;IACA,QAAQA,KAAK,GAAC,EAAd;MACE,KAAK,GAAL;QACE,OAAO;UAAE,oBAAoB;QAAtB,CAAP;;MACF,KAAK,GAAL;QACE,OAAO;UAAE,oBAAoB;QAAtB,CAAP;;MACF,KAAK,GAAL;QACE,OAAO;UAAE,oBAAoB;QAAtB,CAAP;;MACF,KAAK,GAAL;QACE,OAAO;UAAE,oBAAoB;QAAtB,CAAP;;MACF;QACE,OAAO;UAAE,oBAAoB;QAAtB,CAAP;IAVJ;EAYD,CA3EyB,CA6E1B;;;EACAb,cAAc;IACZ,KAAKL,gBAAL,CAAsBoB,WAAtB,CAAkC,WAAlC,EAA+C,EAA/C;EACD,CAhFyB,CAkF1B;;;EACMC,YAAY,CAACL,GAAD,EAAcC,MAAd,EAA4B;IAAA;;IAAA;MAC5C,IAAI;QACF,MAAMK,SAAS,SAAS,KAAI,CAACtB,gBAAL,CAAsBoB,WAAtB,CAAkC,cAAlC,EAAkD;UAAEJ,GAAF;UAAOC;QAAP,CAAlD,CAAxB;QACAN,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCU,SAAlC;QACA,OAAOA,SAAP;MACD,CAJD,CAIE,OAAOC,KAAP,EAAc;QACdZ,OAAO,CAACY,KAAR,CAAc,wCAAd,EAAwDA,KAAxD,EADc,CAEd;;QACA,OAAO,IAAP;MACD;IAT2C;EAU7C,CA7FyB,CA+F1B;;;EACAC,UAAU,CAACR,GAAD,EAAcC,MAAd,EAA8BC,KAA9B,EAA6CO,KAA7C,EAA0D;IAClE;IACA,KAAKzB,gBAAL,CAAsBoB,WAAtB,CAAkC,SAAlC,EAA6C;MAAEJ,GAAF;MAAOC,MAAP;MAAeC,KAAf;MAAsBO;IAAtB,CAA7C,EAFkE,CAGlE;;IACA,KAAKpB,cAAL;EACD,CArGyB,CAuG1B;;;EACAqB,YAAY,CAACV,GAAD,EAAcC,MAAd,EAA4B;IACtC;IACA,KAAKjB,gBAAL,CAAsBoB,WAAtB,CAAkC,cAAlC,EAAkD;MAAEJ,GAAF;MAAOC;IAAP,CAAlD;EACD,CA3GyB,CAgH1B;;;EACFU,eAAe;IAEb,KAAKC,MAAL,GAAc,KAAKC,MAAL,CAAYC,aAA1B;IACA,KAAKC,OAAL,GAAe,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAf;IACA,KAAKJ,MAAL,CAAYK,KAAZ;IAEA,KAAKL,MAAL,GAAc,KAAKC,MAAL,CAAYC,aAA1B;IACE,KAAKI,EAAL,GAAU,MAAM,KAAKC,UAArB;IACA,KAAKC,EAAL,GAAU,MAAM,KAAKC,QAArB;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,QAAzB,EAAmCC,CAAC,EAApC,EAAwC;MACtC,KAAKC,OAAL,CAAaD,CAAb,IAAkB,EAAlB;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAzB,EAAqCK,CAAC,EAAtC,EAA0C;QACxC,KAAKD,OAAL,CAAaD,CAAb,EAAgBE,CAAhB,IAAqB;UAACC,KAAK,EAAE,OAAR;UAAiBC,KAAK,EAAE,KAAKA;QAA7B,CAArB;QACA,KAAKA,KAAL;MACD;IACF,CAhBU,CAkBX;IACA;;;IAEA,KAAKC,cAAL;EAED;;EAGHC,mBAAmB,CAACC,KAAD,EAAqB;IACpClC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCiC,KAAK,CAACC,OAAvC;;IACA,QAAQD,KAAK,CAACC,OAAd;MACE,KAAK,EAAL;QAAS;QACP,KAAKC,SAAL,CAAe9C,CAAf,GAAmB,CAAC,CAApB;QACA,KAAK8C,SAAL,CAAe7C,CAAf,GAAmB,CAAnB;QACA;;MACF,KAAK,EAAL;QAAS;QACP,KAAK6C,SAAL,CAAe9C,CAAf,GAAmB,CAAnB;QACA,KAAK8C,SAAL,CAAe7C,CAAf,GAAmB,CAAC,CAApB;QACA;;MACF,KAAK,EAAL;QAAS;QACP,KAAK6C,SAAL,CAAe9C,CAAf,GAAmB,CAAnB;QACA,KAAK8C,SAAL,CAAe7C,CAAf,GAAmB,CAAnB;QACA;;MACF,KAAK,EAAL;QAAS;QACP,KAAK6C,SAAL,CAAe9C,CAAf,GAAmB,CAAnB;QACA,KAAK8C,SAAL,CAAe7C,CAAf,GAAmB,CAAnB;QACA;;MACF,KAAK,EAAL;QAAS;QACP,KAAK8C,OAAL,GAAe,CAAC,KAAKA,OAArB;;QACA,IAAI,KAAKA,OAAT,EAAkB;UAChBC,aAAa,CAAC,KAAKC,UAAN,CAAb;QACD,CAFD,MAEO;UACL,KAAKA,UAAL,GAAkBC,WAAW,CAAC,MAAK;YACjC,KAAKC,cAAL;UACD,CAF4B,EAE1B,GAF0B,CAA7B;QAGD;;QACD;IA1BJ;;IA4BA,IAAI,CAAC,KAAKJ,OAAN,IAAiB,CAAC,KAAKE,UAA3B,EAAuC;MACrC,KAAKA,UAAL,GAAkBC,WAAW,CAAC,MAAK;QACjC,KAAKC,cAAL;MACD,CAF4B,EAE1B,GAF0B,CAA7B;IAGD;EACF;;EAGDC,WAAW,CAACR,KAAD,EAAqB;IAC9BlC,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BiC,KAAK,CAACC,OAArC;;IACA,QAAQD,KAAK,CAACC,OAAd;MACE,KAAK,EAAL;MACA,KAAK,EAAL;MACA,KAAK,EAAL;MACA,KAAK,EAAL;QACEG,aAAa,CAAC,KAAKC,UAAN,CAAb;QACA,KAAKA,UAAL,GAAkB,IAAlB;QACA;IAPJ;EASD;;EAEOE,cAAc;IACpB,KAAKE,QAAL,CAAcrD,CAAd,IAAmB,KAAK8C,SAAL,CAAe9C,CAAlC;IACA,KAAKqD,QAAL,CAAcpD,CAAd,IAAmB,KAAK6C,SAAL,CAAe7C,CAAlC;IACA,IAAI,KAAKoD,QAAL,CAAcrD,CAAd,GAAkB,CAAtB,EAAyB,KAAKqD,QAAL,CAAcrD,CAAd,GAAkB,CAAlB;IACzB,IAAI,KAAKqD,QAAL,CAAcpD,CAAd,GAAkB,CAAtB,EAAyB,KAAKoD,QAAL,CAAcpD,CAAd,GAAkB,CAAlB;IACzB,IAAI,KAAKoD,QAAL,CAAcrD,CAAd,IAAmB,KAAKkC,UAA5B,EAAwC,KAAKmB,QAAL,CAAcrD,CAAd,GAAkB,KAAKkC,UAAL,GAAkB,CAApC;IACxC,IAAI,KAAKmB,QAAL,CAAcpD,CAAd,IAAmB,KAAKmC,QAA5B,EAAsC,KAAKiB,QAAL,CAAcpD,CAAd,GAAkB,KAAKmC,QAAL,GAAgB,CAAlC;IAEtC,KAAKM,cAAL;IACA,KAAKY,UAAL,CAAgB,KAAKD,QAAL,CAAcrD,CAA9B,EAAiC,KAAKqD,QAAL,CAAcpD,CAA/C,EAAkD,MAAlD;IACA,KAAKsD,SAAL,CAAe,KAAKF,QAAL,CAAcrD,CAA7B,EAAgC,KAAKqD,QAAL,CAAcpD,CAA9C;EACD;;EAGOqD,UAAU,CAACtD,CAAD,EAAYC,CAAZ,EAAuBuC,KAAvB,EAAoC;IACpD,MAAMgB,EAAE,GAAGxD,CAAC,GAAG,KAAKiC,EAApB;IACA,MAAMwB,EAAE,GAAGxD,CAAC,GAAG,KAAKkC,EAApB;IAEA,KAAKL,OAAL,EAAc4B,QAAd,CAAuBF,EAAvB,EAA2BC,EAA3B,EAA+B,KAAKxB,EAApC,EAAwC,KAAKE,EAA7C;IACA,KAAKL,OAAL,EAAc6B,UAAd,CAAyBH,EAAzB,EAA6BC,EAA7B,EAAiC,KAAKxB,EAAtC,EAA0C,KAAKE,EAA/C;EACD;;EAEOO,cAAc;IACpB,IAAI,KAAKZ,OAAT,EAAkB;MAChB,KAAKA,OAAL,CAAa8B,SAAb,GAAyB,MAAzB;MACA,KAAK9B,OAAL,CAAa4B,QAAb,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,GAA5B,EAAiC,GAAjC;;MACA,KAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKD,QAAzB,EAAmCC,CAAC,EAApC,EAAwC;QACtC,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,UAAzB,EAAqCK,CAAC,EAAtC,EAA0C;UACxC,MAAMsB,MAAM,GAAG,KAAKvB,OAAL,CAAaD,CAAb,EAAgBE,CAAhB,CAAf;UACA,KAAKT,OAAL,CAAa8B,SAAb,GAAyBC,MAAM,CAACrB,KAAhC;UACA,MAAMgB,EAAE,GAAGjB,CAAC,GAAG,KAAKN,EAApB;UACA,MAAMwB,EAAE,GAAGpB,CAAC,GAAG,KAAKF,EAApB;UACA,KAAKL,OAAL,CAAa4B,QAAb,CAAsBF,EAAtB,EAA0BC,EAA1B,EAA8B,KAAKxB,EAAnC,EAAuC,KAAKE,EAA5C;UACA,KAAKL,OAAL,CAAagC,WAAb,GAA2B,OAA3B;UACA,KAAKhC,OAAL,CAAa6B,UAAb,CAAwBH,EAAxB,EAA4BC,EAA5B,EAAgC,KAAKxB,EAArC,EAAyC,KAAKE,EAA9C;QACD;MACF;IACF;EACF;;EAGOoB,SAAS,CAACvD,CAAD,EAAYC,CAAZ,EAAqB;IACpC,KAAK6B,OAAL,CAAa8B,SAAb,GAAyB,OAAzB;IACA,KAAK9B,OAAL,CAAaiC,IAAb,GAAoB,YAApB;IACA,KAAKjC,OAAL,CAAakC,QAAb,CAAsB,WAAW/D,CAAjC,EAAoC,CAApC,EAAuC,KAAKA,CAAC,GAAG,KAAKkC,EAArD;IACA,KAAKL,OAAL,CAAakC,QAAb,CAAsB,cAAchE,CAApC,EAAuC,CAAvC,EAA0C,KAAKA,CAAC,GAAG,KAAKiC,EAAxD;EACD;;AA5OyB;;;mBAAfpC,iBAAeoE;AAAA;;;QAAfpE;EAAeqE;EAAAC;IAAA;;;;;;;;;;;;;eAAfC;MAA2B;QAAA,OAA3BA,uBAA2B;MAAR;;;;;;;;MCVhCH,6BAAM,CAAN,EAAM,MAAN,EAAM,CAAN,EAAM,OAAN;MAEWA;MAAeA;MAO1BA;MACIA;MACJA","names":["ElementRef","MatrixComponent","constructor","websocketService","x","y","ngOnInit","setupWebSocket","getMatrixValue","socket","getMessage","subscribe","message","handleIncomingMessage","console","log","action","matrix","data","row","column","value","getCellColor","sendMessage","getCellValue","cellValue","error","updateCell","gamer","createMatrix","ngAfterViewInit","canvas","lienzo","nativeElement","context","getContext","focus","gw","horizontal","gh","vertical","i","cuadros","j","color","index","fillBackground","handleKeyboardEvent","event","keyCode","direccion","pausado","clearInterval","intervalId","setInterval","updatePosition","handleKeyUp","posicion","drawSquare","drawIndex","rx","ry","fillRect","strokeRect","fillStyle","cuadro","strokeStyle","font","fillText","i0","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts","C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\nimport { ElementRef, ViewChild, AfterViewInit } from '@angular/core';\nimport { HostListener } from '@angular/core';\n\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\nexport class MatrixComponent implements OnInit, AfterViewInit  {\n  // Declarar propiedades y métodos según sea necesario\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 0; // Jugador para la celda a actualizar\n\n  @ViewChild('lienzo', { static: true }) lienzo: ElementRef;\n  private canvas: HTMLCanvasElement;\n  private context: CanvasRenderingContext2D;\n  private vertical = 10;\n  private horizontal = 10;\n  private gw: number;\n  private gh: number;\n  private posicion = {x: 0, y: 0};\n  private cuadros: { color: string; index: number }[][] = [];\n  private index = 0;\n  private direccion = {x: 0, y: 0};\n  private intervalId:  NodeJS.Timeout ;\n  private pausado = false;\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket();\n    // Solicitar la matriz al servidor al iniciar el componente\n    this.getMatrixValue();\n  }\n\n  // Método para configurar la conexión WebSocket\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  // Método para manejar los mensajes entrantes del servidor\n  private handleIncomingMessage(message: any): void {\n    console.log('Mensaje del servidor:', message);\n\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    }\n    \n    // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {row, column, value } = message.data;\n      console.log('handle component updateCell row' + row);\n    }\n\n    // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n  }\n\n  getCellColor(value: number | null): any {\n    console.log(' getCelllCOlor                   ' + value)\n    switch (value+'') {\n      case '1':\n        return { 'background-color': 'blue' };\n      case '2':\n        return { 'background-color': 'red' };\n      case '3':\n        return { 'background-color': 'green' };\n      case '4':\n        return { 'background-color': 'gray' };\n      default:\n        return { 'background-color': 'lightblue' };\n    }\n  }\n  \n  // Método para solicitar la matriz al servidor\n  getMatrixValue(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  // Método asincrónico para obtener el valor de una celda desde el servidor\n  async getCellValue(row: number, column: number): Promise<any> {\n    try {\n      const cellValue = await this.websocketService.sendMessage('getCellValue', { row, column });\n      console.log('Valor de la celda:', cellValue);\n      return cellValue;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      // Aquí puedes manejar el error como desees\n      return null;\n    }\n  }\n\n  // Método para actualizar una celda en la matriz\n  updateCell(row: number, column: number, value: number, gamer: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', { row, column, value, gamer });\n    // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    this.getMatrixValue();\n  }\n\n  // Método para crear una nueva matriz en el servidor\n  createMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n\n\n\n  // Otros métodos y funciones según sea necesario\nngAfterViewInit(): void {\n\n  this.canvas = this.lienzo.nativeElement;\n  this.context = this.canvas.getContext('2d');\n  this.canvas.focus();  \n  \n  this.canvas = this.lienzo.nativeElement;\n    this.gw = 800 / this.horizontal;\n    this.gh = 800 / this.vertical;\n\n    for (let i = 0; i < this.vertical; i++) {\n      this.cuadros[i] = [];\n      for (let j = 0; j < this.horizontal; j++) {\n        this.cuadros[i][j] = {color: \"white\", index: this.index};\n        this.index++;\n      }\n    }\n\n    //this.canvas.addEventListener('keydown', (event) => this.onKeyDown(event));\n    //this.canvas.addEventListener('keyup', (event) => this.onKeyUp(event));\n\n    this.fillBackground();\n    \n  }\n\n  @HostListener('window:keydown', ['$event'])\nhandleKeyboardEvent(event: KeyboardEvent): void {\n    console.log(\"Tecla presionada:\", event.keyCode);\n    switch (event.keyCode) {\n      case 37: // Left arrow\n        this.direccion.x = -1;\n        this.direccion.y = 0;\n        break;\n      case 38: // Up arrow\n        this.direccion.x = 0;\n        this.direccion.y = -1;\n        break;\n      case 39: // Right arrow\n        this.direccion.x = 1;\n        this.direccion.y = 0;\n        break;\n      case 40: // Down arrow\n        this.direccion.x = 0;\n        this.direccion.y = 1;\n        break;\n      case 80: // \"p\" key\n        this.pausado = !this.pausado;\n        if (this.pausado) {\n          clearInterval(this.intervalId!);\n        } else {\n          this.intervalId = setInterval(() => {\n            this.updatePosition();\n          }, 100);\n        }\n        break;\n    }\n    if (!this.pausado && !this.intervalId) {\n      this.intervalId = setInterval(() => {\n        this.updatePosition();\n      }, 100);\n    }\n  }\n  \n  @HostListener('window:keyup', ['$event'])\n  handleKeyUp(event: KeyboardEvent): void {\n    console.log(\"Tecla liberada:\", event.keyCode);\n    switch (event.keyCode) {\n      case 37:\n      case 38:\n      case 39:\n      case 40:\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n        break;\n    }\n  }\n\n  private updatePosition(): void {\n    this.posicion.x += this.direccion.x;\n    this.posicion.y += this.direccion.y;\n    if (this.posicion.x < 0) this.posicion.x = 0;\n    if (this.posicion.y < 0) this.posicion.y = 0;\n    if (this.posicion.x >= this.horizontal) this.posicion.x = this.horizontal - 1;\n    if (this.posicion.y >= this.vertical) this.posicion.y = this.vertical - 1;\n    \n    this.fillBackground();\n    this.drawSquare(this.posicion.x, this.posicion.y, \"blue\");\n    this.drawIndex(this.posicion.x, this.posicion.y);\n  }\n  \n\n  private drawSquare(x: number, y: number, color: string): void {\n    const rx = x * this.gw;\n    const ry = y * this.gh;\n    \n    this.context?.fillRect(rx, ry, this.gw, this.gh);\n    this.context?.strokeRect(rx, ry, this.gw, this.gh);\n  }\n  \n  private fillBackground(): void {\n    if (this.context) {\n      this.context.fillStyle = '#000';\n      this.context.fillRect(0, 0, 400, 400);\n      for (let i = 0; i < this.vertical; i++) {\n        for (let j = 0; j < this.horizontal; j++) {\n          const cuadro = this.cuadros[i][j];\n          this.context.fillStyle = cuadro.color;\n          const rx = j * this.gw;\n          const ry = i * this.gh;\n          this.context.fillRect(rx, ry, this.gw, this.gh);\n          this.context.strokeStyle = \"black\";\n          this.context.strokeRect(rx, ry, this.gw, this.gh);\n        }\n      }\n    }\n  }\n    \n\n  private drawIndex(x: number, y: number): void {\n    this.context.fillStyle = \"black\";\n    this.context.font = \"12px Arial\";\n    this.context.fillText(\"Fila: \" + y, 5, 15 + y * this.gh);\n    this.context.fillText(\"Columna: \" + x, 5, 28 + x * this.gw);\n  }\n\n}\n\n\n","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Mapa de Cuadros</title>\r\n    <style>\r\n        canvas {\r\n            border: 1px solid black;\r\n        }\r\n    </style>\r\n</head>\r\n<body style=\"margin: 0\">\r\n    <canvas #lienzo width=\"400\" height=\"400\" ></canvas>\r\n</body>\r\n</html>\r\n"]},"metadata":{},"sourceType":"module"}