{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet MatrixComponent = class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService; // Declarar propiedades y métodos según sea necesario\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 0; // Jugador para la celda a actualizar\n  }\n\n  ngOnInit() {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket(); // Solicitar la matriz al servidor al iniciar el componente\n\n    this.getMatrixValue();\n  } // Método para configurar la conexión WebSocket\n\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  } // Método para manejar los mensajes entrantes del servidor\n\n\n  handleIncomingMessage(message) {\n    console.log('Mensaje del servidor:', message); // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    } // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n\n\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {\n        row,\n        column,\n        value\n      } = message.data;\n      console.log('handle component updateCell row' + row);\n    } // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n\n  }\n\n  getCellColor(value) {\n    console.log(' getCelllCOlor                   ' + value);\n\n    switch (value + '') {\n      case '1':\n        return {\n          'background-color': 'blue'\n        };\n\n      case '2':\n        return {\n          'background-color': 'red'\n        };\n\n      case '3':\n        return {\n          'background-color': 'green'\n        };\n\n      case '4':\n        return {\n          'background-color': 'gray'\n        };\n\n      default:\n        return {\n          'background-color': 'lightblue'\n        };\n    }\n  } // Método para solicitar la matriz al servidor\n\n\n  getMatrixValue() {\n    this.websocketService.sendMessage('getMatrix', {});\n  } // Método asincrónico para obtener el valor de una celda desde el servidor\n\n\n  getCellValue(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellValue = yield _this.websocketService.sendMessage('getCellValue', {\n          row,\n          column\n        });\n        console.log('Valor de la celda:', cellValue);\n        return cellValue;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error); // Aquí puedes manejar el error como desees\n\n        return null;\n      }\n    })();\n  } // Método para actualizar una celda en la matriz\n\n\n  updateCell(row, column, value, gamer) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      value,\n      gamer\n    }); // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n\n    this.getMatrixValue();\n  } // Método para crear una nueva matriz en el servidor\n\n\n  createMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  }\n\n};\nMatrixComponent = __decorate([Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})], MatrixComponent);\nexport { MatrixComponent };","map":{"version":3,"mappings":"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","names":["Component","MatrixComponent","constructor","websocketService","ngOnInit","setupWebSocket","getMatrixValue","socket","getMessage","subscribe","message","handleIncomingMessage","console","log","action","matrix","data","row","column","value","getCellColor","sendMessage","getCellValue","cellValue","error","updateCell","gamer","createMatrix","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\nexport class MatrixComponent implements OnInit {\n  // Declarar propiedades y métodos según sea necesario\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 0; // Jugador para la celda a actualizar\n  \n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket();\n    // Solicitar la matriz al servidor al iniciar el componente\n    this.getMatrixValue();\n  }\n\n  // Método para configurar la conexión WebSocket\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  // Método para manejar los mensajes entrantes del servidor\n  private handleIncomingMessage(message: any): void {\n    console.log('Mensaje del servidor:', message);\n\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    }\n    \n    // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {row, column, value } = message.data;\n      console.log('handle component updateCell row' + row);\n    }\n\n    // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n  }\n\n  getCellColor(value: number | null): any {\n    console.log(' getCelllCOlor                   ' + value)\n    switch (value+'') {\n      case '1':\n        return { 'background-color': 'blue' };\n      case '2':\n        return { 'background-color': 'red' };\n      case '3':\n        return { 'background-color': 'green' };\n      case '4':\n        return { 'background-color': 'gray' };\n      default:\n        return { 'background-color': 'lightblue' };\n    }\n  }\n  \n  // Método para solicitar la matriz al servidor\n  getMatrixValue(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  // Método asincrónico para obtener el valor de una celda desde el servidor\n  async getCellValue(row: number, column: number): Promise<any> {\n    try {\n      const cellValue = await this.websocketService.sendMessage('getCellValue', { row, column });\n      console.log('Valor de la celda:', cellValue);\n      return cellValue;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      // Aquí puedes manejar el error como desees\n      return null;\n    }\n  }\n\n  // Método para actualizar una celda en la matriz\n  updateCell(row: number, column: number, value: number, gamer: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', { row, column, value, gamer });\n    // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    this.getMatrixValue();\n  }\n\n  // Método para crear una nueva matriz en el servidor\n  createMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  // Otros métodos y funciones según sea necesario\n\n}\n"]},"metadata":{},"sourceType":"module"}