{"ast":null,"code":"import _asyncToGenerator from \"C:/kmi/Dropbox/pro/matrix/front/matrix/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/websocket.service\";\nimport * as i2 from \"@angular/common\";\n\nfunction MatrixComponent_tr_1_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 3);\n    i0.ɵɵlistener(\"click\", function MatrixComponent_tr_1_td_1_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const j_r5 = restoredCtx.index;\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.setActiveCell(i_r2, j_r5));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cell_r4 = ctx.$implicit;\n    const j_r5 = ctx.index;\n    const i_r2 = i0.ɵɵnextContext().index;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"background-color\", ctx_r3.isActiveCell(i_r2, j_r5) ? ctx_r3.getCellColor(ctx_r3.pla) : ctx_r3.getCellColor(cell_r4 == null ? null : cell_r4.player))(\"border\", ctx_r3.isActiveCell(i_r2, j_r5) ? \"2px solid yellow\" : \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", cell_r4 == null ? null : cell_r4.player, \" \");\n  }\n}\n\nfunction MatrixComponent_tr_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, MatrixComponent_tr_1_td_1_Template, 2, 5, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport class MatrixComponent {\n  constructor(websocketService) {\n    this.websocketService = websocketService; // Declarar propiedades y métodos según sea necesario\n\n    this.rows = 100; // Fila para la celda a actualizar\n\n    this.cols = 100; // Columna para la celda a actualizar\n\n    this.matrix = []; // Matriz para almacenar los datos recibidos del servidor\n\n    this.row = 0; // Fila para la celda a actualizar\n\n    this.col = 0; // Columna para la celda a actualizar\n\n    this.val = 0; // Valor para la celda a actualizar\n\n    this.pla = 1; // Jugador para la celda a actualizar\n    // Variables para almacenar la posición activa\n\n    this.activeCell = null;\n    this.visitedCells = [];\n  }\n\n  ngOnInit() {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket(); // Solicitar la matriz al servidor al iniciar el componente\n\n    this.getMatrixValue();\n  } // Método para configurar la conexión WebSocket\n\n\n  setupWebSocket() {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe(message => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  } // Método para manejar los mensajes entrantes del servidor\n\n\n  handleIncomingMessage(message) {\n    ////console.log('Mensaje del servidor:', message);\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      ////console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    } // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n\n\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const {\n        row,\n        column,\n        player\n      } = message.data; ////console.log('handle component updateCell row' + row);\n    } // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n\n  } // Método para solicitar la matriz al servidor\n\n\n  getMatrixValue() {\n    this.websocketService.sendMessage('getMatrix', {});\n  } // Método asincrónico para obtener el valor de una celda desde el servidor\n\n\n  getCellPlayer(row, column) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const cellPlayer = yield _this.websocketService.sendMessage('getCellPlayer', {\n          row,\n          column\n        }); //console.log('Valor de la celda:', cellValue);\n\n        return cellPlayer;\n      } catch (error) {\n        console.error('Error obteniendo el valor de la celda:', error); // Aquí puedes manejar el error como desees\n\n        return null;\n      }\n    })();\n  } // Método para actualizar una celda en la matriz\n\n\n  updateCell(row, column, player, value) {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', {\n      row,\n      column,\n      player,\n      value\n    }); // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    //this.getMatrixValue();\n  } // Método para actualizar VARIAS celda en la matrix cuando un juagador gana o pierde\n\n\n  updateCellsByPlayer(player, value, row, column) {\n    this.websocketService.sendMessage('updateCellsByPlayer', {\n      player,\n      value,\n      row,\n      column\n    });\n  } // Método para crear una nueva matriz en el servidor\n\n\n  createMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', {\n      row,\n      column\n    });\n  } // Método para DROP una nueva matriz en el servidor\n\n\n  dropMatrix(row, column) {\n    // Enviar un mensaje al servidor WebSocket para DROP la matriz\n    this.websocketService.sendMessage('dropMatrix', {});\n  } // Otros métodos y funciones según sea necesario\n  // Métodos que permiten \n  // cambia el color de acuerdocon el jugador que esté jugando\n\n\n  getCellColor(player) {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n\n      case '2':\n        return 'red';\n\n      case '3':\n        return 'green';\n\n      case '4':\n        return 'gray';\n\n      default:\n        return 'lightblue';\n    }\n  }\n\n  handleKeyDown(event) {\n    let {\n      row,\n      col\n    } = this.activeCell || {\n      row: 0,\n      col: 0\n    };\n\n    switch (event.key) {\n      case 'ArrowUp':\n        row = Math.max(-1, row - 1);\n        break;\n\n      case 'ArrowDown':\n        row = Math.min(this.rows, row + 1);\n        break;\n\n      case 'ArrowLeft':\n        col = Math.max(-1, col - 1);\n        break;\n\n      case 'ArrowRight':\n        col = Math.min(this.cols, col + 1);\n        break;\n\n      default:\n        return;\n    }\n\n    if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n      this.updateCellsByPlayer(this.pla, 0, this.rows, this.cols);\n    } else {\n      this.setActiveCell(row, col);\n    }\n  }\n\n  setActiveCell(row, col) {\n    this.activeCell = {\n      row,\n      col\n    };\n    this.visitedCells.push({\n      row,\n      col\n    });\n    this.updateCell(row, col, this.pla, 0);\n  }\n\n  isActiveCell(row, col) {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n}\n\nMatrixComponent.ɵfac = function MatrixComponent_Factory(t) {\n  return new (t || MatrixComponent)(i0.ɵɵdirectiveInject(i1.WebsocketService));\n};\n\nMatrixComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MatrixComponent,\n  selectors: [[\"app-matrix\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[\"tabindex\", \"0\", 3, \"keydown\"], [4, \"ngFor\", \"ngForOf\"], [3, \"background-color\", \"border\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function MatrixComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"table\", 0);\n      i0.ɵɵlistener(\"keydown\", function MatrixComponent_Template_table_keydown_0_listener($event) {\n        return ctx.handleKeyDown($event);\n      });\n      i0.ɵɵtemplate(1, MatrixComponent_tr_1_Template, 2, 1, \"tr\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.matrix);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"table[_ngcontent-%COMP%] {\\r\\n    border-collapse: collapse;\\r\\n  }\\r\\n  \\r\\n  td[_ngcontent-%COMP%] {\\r\\n    width: 40px;  \\r\\n    height: 20px; \\r\\n    text-align: center;\\r\\n    vertical-align: middle;\\r\\n    border: 1px solid black;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdHJpeC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJFQUFFO0lBQ0UseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UsV0FBVyxHQUFHLHVCQUF1QjtJQUNyQyxZQUFZLEVBQUUsdUJBQXVCO0lBQ3JDLGtCQUFrQjtJQUNsQixzQkFBc0I7SUFDdEIsdUJBQXVCO0VBQ3pCIiwiZmlsZSI6Im1hdHJpeC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiICB0YWJsZSB7XHJcbiAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIH1cclxuICBcclxuICB0ZCB7XHJcbiAgICB3aWR0aDogNDBweDsgIC8qIFRhbWHDsW8gZGUgbGEgY2VsZGEgKi9cclxuICAgIGhlaWdodDogMjBweDsgLyogVGFtYcOxbyBkZSBsYSBjZWxkYSAqL1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xyXG4gIH1cclxuICAiXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r3","MatrixComponent","constructor","websocketService","ngOnInit","setupWebSocket","getMatrixValue","socket","getMessage","subscribe","message","handleIncomingMessage","action","matrix","data","row","column","player","sendMessage","getCellPlayer","cellPlayer","error","console","updateCell","value","updateCellsByPlayer","createMatrix","dropMatrix","getCellColor","handleKeyDown","event","col","activeCell","key","Math","max","min","rows","cols","pla","setActiveCell","visitedCells","push","isActiveCell","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.html","C:\\kmi\\Dropbox\\pro\\matrix\\front\\matrix\\src\\app\\components\\matrix\\matrix.component.ts"],"sourcesContent":["<!--\n<div class=\"update-cell-form\">\n  <label>Fila:</label>\n  <input class=\"input-field\" type=\"number\" placeholder=\"Fila\" [(ngModel)]=\"row\">\n  <label>Columna:</label>\n  <input class=\"input-field\" type=\"number\" placeholder=\"Columna\" [(ngModel)]=\"col\">\n  <label>Nuevo valor:</label>\n  <input class=\"input-field\" type=\"text\" placeholder=\"Nuevo valor\" [(ngModel)]=\"val\">\n  <label>Jugador:</label>\n  <input class=\"input-field\" type=\"text\" placeholder=\"Jugador\" [(ngModel)]=\"pla\">\n  <button class=\"update-button\" (click)=\"updateCell(row, col, pla, val)\">Actualizar Celda</button>\n  <button class=\"update-button\" (click)=\"getCellPlayer(row, col)\">Obtener valor</button>\n  <button class=\"update-button\" (click)=\"createMatrix(rows, cols)\">Crear matrix</button>\n  <button class=\"update-button\" (click)=\"dropMatrix(rows, cols)\">Borrar matrix</button>\n</div>\n<br>\n-->\n\n\n<table (keydown)=\"handleKeyDown($event)\" tabindex=\"0\">\n  <tr *ngFor=\"let row of matrix; let i = index\">\n    <td *ngFor=\"let cell of row; let j = index\"\n        [style.background-color]=\"isActiveCell(i, j) ? getCellColor(pla) : getCellColor(cell?.player)\"\n        [style.border]=\"isActiveCell(i, j) ? '2px solid yellow' : ''\"\n        (click)=\"setActiveCell(i, j)\">\n      {{ cell?.player }}\n    </td>\n  </tr>\n</table>\n\n","import { Component, OnInit } from '@angular/core';\nimport { WebsocketService } from '../../services/websocket.service';\n\n@Component({\n  selector: 'app-matrix',\n  templateUrl: './matrix.component.html',\n  styleUrls: ['./matrix.component.css']\n})\nexport class MatrixComponent implements OnInit {\n  // Declarar propiedades y métodos según sea necesario\n\n\n  rows: number = 100; // Fila para la celda a actualizar\n  cols: number = 100; // Columna para la celda a actualizar\n  matrix: any[][] = []; // Matriz para almacenar los datos recibidos del servidor\n  row: number = 0; // Fila para la celda a actualizar\n  col: number = 0; // Columna para la celda a actualizar\n  val: number = 0; // Valor para la celda a actualizar\n  pla: number = 1 // Jugador para la celda a actualizar\n\n\n\n  constructor(private websocketService: WebsocketService) { }\n\n  ngOnInit(): void {\n    // Configurar la conexión WebSocket al iniciar el componente\n    this.setupWebSocket();\n    // Solicitar la matriz al servidor al iniciar el componente\n    this.getMatrixValue();\n  }\n\n  // Método para configurar la conexión WebSocket\n  private setupWebSocket(): void {\n    const socket = this.websocketService.getMessage();\n    socket.subscribe((message) => {\n      // Manejar los mensajes entrantes del servidor\n      this.handleIncomingMessage(message);\n    });\n  }\n\n  // Método para manejar los mensajes entrantes del servidor\n  private handleIncomingMessage(message: any): void {\n    ////console.log('Mensaje del servidor:', message);\n\n    // Actualizar la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateMatrix') {\n      //Actualizar la matriz con los nuevos datos recibidos del servidor\n      ////console.log('handle component updateMatrix');\n      this.matrix = message.data.matrix;\n    }\n\n    // Actualizar celdas de la matriz si se recibe un mensaje de actualización de matriz\n    if (message.action === 'updateCell') {\n      //Actualizar la matriz con los nuevos datos de la celda recibidos del servidor\n      const { row, column, player } = message.data;\n      ////console.log('handle component updateCell row' + row);\n    }\n\n    // Otros tipos de mensajes pueden ser manejados aquí según las necesidades de la aplicación\n  }\n\n\n  // Método para solicitar la matriz al servidor\n  getMatrixValue(): void {\n    this.websocketService.sendMessage('getMatrix', {});\n  }\n\n  // Método asincrónico para obtener el valor de una celda desde el servidor\n  async getCellPlayer(row: number, column: number): Promise<any> {\n    try {\n      const cellPlayer = await this.websocketService.sendMessage('getCellPlayer', { row, column });\n      //console.log('Valor de la celda:', cellValue);\n      return cellPlayer;\n    } catch (error) {\n      console.error('Error obteniendo el valor de la celda:', error);\n      // Aquí puedes manejar el error como desees\n      return null;\n    }\n  }\n\n  // Método para actualizar una celda en la matriz\n  updateCell(row: number, column: number, player: number, value: number): void {\n    // Enviar un mensaje al servidor WebSocket para actualizar la celda\n    this.websocketService.sendMessage('updCell', { row, column, player, value });\n    // Después de actualizar la celda, se vuelve a solicitar la matriz al servidor\n    //this.getMatrixValue();\n  }\n\n  // Método para actualizar VARIAS celda en la matrix cuando un juagador gana o pierde\n  updateCellsByPlayer(player: number, value: number, row: number, column: number) {\n    this.websocketService.sendMessage('updateCellsByPlayer', { player, value, row, column });\n  }\n\n  // Método para crear una nueva matriz en el servidor\n  createMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para crear la matriz\n    this.websocketService.sendMessage('createMatrix', { row, column });\n  }\n\n  // Método para DROP una nueva matriz en el servidor\n  dropMatrix(row: number, column: number): void {\n    // Enviar un mensaje al servidor WebSocket para DROP la matriz\n    this.websocketService.sendMessage('dropMatrix', {});\n  }\n\n\n\n\n\n\n\n\n\n  // Otros métodos y funciones según sea necesario\n\n  // Métodos que permiten \n\n  // cambia el color de acuerdocon el jugador que esté jugando\n  getCellColor(player: number | null): any {\n    switch (player + '') {\n      case '1':\n        return 'blue';\n      case '2':\n        return 'red';\n      case '3':\n        return 'green';\n      case '4':\n        return 'gray';\n      default:\n        return 'lightblue';\n    }\n  }\n\n\n  // Variables para almacenar la posición activa\n  activeCell: { row: number, col: number } | null = null;\n  visitedCells: { row: number, col: number }[] = [];\n\n  handleKeyDown(event: KeyboardEvent): void {\n    let { row, col } = this.activeCell || { row: 0, col: 0 };\n    switch (event.key) {\n      case 'ArrowUp':\n        row = Math.max(-1, row - 1);\n        break;\n      case 'ArrowDown':\n        row = Math.min(this.rows, row + 1);\n        break;\n      case 'ArrowLeft':\n        col = Math.max(-1, col - 1);\n        break;\n      case 'ArrowRight':\n        col = Math.min(this.cols, col + 1);\n        break;\n      default:\n        return;\n    }\n    if (row >= this.rows || col >= this.cols || row < 0 || col < 0) {\n      this.updateCellsByPlayer(this.pla, 0, this.rows, this.cols);\n    } else {\n      this.setActiveCell(row, col);\n    }\n  }\n\n  setActiveCell(row: number, col: number): void {\n    this.activeCell = { row, col };\n    this.visitedCells.push({ row, col });\n    this.updateCell(row, col, this.pla, 0);\n  }\n\n  isActiveCell(row: number, col: number): boolean {\n    return this.activeCell?.row === row && this.activeCell?.col === col;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}